{"version":3,"sources":["components/ControlPanel/ControlPanel.tsx","components/CurrentGameStatistics/Indicator/Indicator.tsx","Const/generalConsts.tsx","components/CurrentGameStatistics/CurrentGameStatistics.tsx","components/GameCanvas/GameCanvas.tsx","components/SettingsPanel/SettingsPanel.tsx","sounds/points.wav","sounds/move.wav","sounds/click.mp3","sounds/noChange.flac","components/GameField.tsx","components/Footer/rs_school_js.svg","components/Footer/github.png","components/Footer/footer.tsx","index.tsx"],"names":["ControlPanel","newGameHAndler","toggleFullScreen","fullScreenButtonValue","className","type","value","onClick","Indicator","props","name","transitionUp","transitionDown","transitionLeft","transitionRight","insLeadZeroToTimer","timeNumber","toString","lengthBetweenCells","CurrentGameStatistics","Math","floor","gameTime","movedCells","cellMerges","score","calcBgColor","result","calcTranslateX","direction","path","calcTranslateY","GameCanvas","gameCells","isCellAppearance","transitionDirection","cellAnimationEndHandler","cellTransitionEndHandler","widthHeight","sqrt","length","gameCanvas","React","useRef","handleAppearAnimation","handleCellTransition","current","ref","onAnimationEnd","innerCellAnimationEndHandler","removeEventListener","onTransitionEnd","innercellTransitionEndHandler","map","index","displayedValue","prevValue","curValue","isCellTransitioned","cellStyle","color","background","animation","isUpdatedOrNew","transform","transition","style","width","height","normalizeValue","round","SettingsPanel","volume","setvolume","prev","Events","insertRandom2or4ValueToEmptyField","arr","numOfInserts","fieldSize","maxValue","newGameCell","arrOfFilledIndexes","push","i","searcValue","indexForInsert","random","includes","gameCell","forEach","generateNewGame","numOfInsertedValuesOnNewGame","array","Array","fill","GameField","useState","Date","toISOString","gameStartTime","setgameStartTime","setscore","setcellMerges","setmovedCells","setgameTime","setGameCells","setfullScreenButtonValue","setisCellAppearance","settransitionDirection","cancalculateCelsNewState","gameWStatAndCanvasWrapper","useSound","points","pointsSound","move","moveSound","click","clickSound","noChange","noChangeSound","keyDownHandler","useCallback","e","cellTransitionDirection","eventName","getCellsTransitionDirection","key","gameCellsToChange","newArr","isArrChanged","size","mainAxisStartIndex","mainAxisOffset","crossAxisOffset","mainAxisLastIndex","cell","curColumnIndex","testArr","iteration","srcCellIndexForMove","curCheckRowNumber","processAnalysis","srcCellIndex","srcCell","dstCellIndex","dstCell","undefined","calculateNewCellsState","useEffect","window","addEventListener","timeIncrementInterval","setInterval","curTime","clearInterval","document","fullscreenElement","exitFullscreen","requestFullscreen","Footer","href","target","src","schoolLogo","alt","githubLogo","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec0c0b9e.chunk.js","sourcesContent":["import React from 'react'\nimport './ControlPanel.css'\n\ninterface ControlPAnel {\n\tnewGameHAndler: Function,\n\ttoggleFullScreen: Function,\n\tfullScreenButtonValue: string,\n}\n\nexport default function ControlPanel({newGameHAndler, toggleFullScreen, fullScreenButtonValue}: ControlPAnel) {\n\treturn(\n\t\t<div className='ControlPanel'>\n\t\t\t{/* <div>Nickname or login\\authorization</div> */}\n\t\t\t<input type='button' value='New Game' className=' controlButton' onClick={() => newGameHAndler()}></input>\n\t\t\t<input type='button' value='Game Statistics' className=' controlButton'></input>\n\t\t\t<input type='button' value={fullScreenButtonValue} className=' controlButton'onClick={() => { toggleFullScreen()}}></input>\n\t\t</div>\n\t)\n}","import React from 'react'\nimport './Indicator.css'\n\ninterface Props {\n\tname: string,\n\tvalue: string | number,\n}\nexport default function Indicator(props: Props) {\n\treturn (\n\t\t<div className='Indicator'>\n\t\t\t<div className='Indicator-Name'>{props.name}</div>\n\t\t\t<div className='Indicator-Value'>{props.value}</div>\n\t\t</div>\n\t)\n}","const colorForEmty: string = 'rgba(238, 228, 218, 0.35)';\nconst colorFor2: string = '#eee4da';\nconst colorFor4: string = '#eee1c9';\nconst colorFor8: string = '#f3b27a';\nconst colorFor16: string = '#f69664';\nconst colorFor32: string = '#f77c5f';\nconst colorFor64: string = '#f75f3b';\nconst colorFor128: string = '#edd073';\nconst colorFor256: string = '#edcc62';\n\nconst cellValueColorBelow8: string= '#776e65';\nconst cellValueColorMore8: string= '#f9f6f2';\n\nconst transitionUp: string = 'up';\nconst transitionDown: string = 'daown';\nconst transitionLeft: string = 'left';\nconst transitionRight: string = 'right';\n\nfunction insLeadZeroToTimer (timeNumber: number){\n  return  (timeNumber < 10 ? \"0\" : \"\") + timeNumber.toString();\n }\nconst lengthBetweenCells: number = 100 / 85 *100; // соотношение длинны класса GameCanvas-CellBackground и GameCanvas-Cell.\nexport {\n\n\n\tcolorForEmty,\n\tcolorFor2,\n\tcolorFor4,\n\tcolorFor8,\n\tcolorFor16,\n\tcolorFor32,\n\tcolorFor64,\n\tcolorFor128,\n\tcolorFor256,\n\n\tcellValueColorBelow8,\n\tcellValueColorMore8,\n\n\ttransitionUp,\n\ttransitionDown,\n\ttransitionLeft,\n\ttransitionRight,\n\n\tlengthBetweenCells,\n\n\tinsLeadZeroToTimer,\n}","import React from \"react\";\nimport './CurrentGameStatistics.css'\nimport Indicator from \"./Indicator/Indicator\";\nimport {insLeadZeroToTimer} from '../../Const/generalConsts'\ntype props ={\n\tscore:number,\n\tcellMerges:number,\n\tmovedCells: number,\n\tgameTime: number,\n}\n// function insLeadZeroToTimer (timeNumber: number){\n//   return  (timeNumber < 10 ? \"0\" : \"\") + timeNumber.toString();\n//  }\n\nexport default function CurrentGameStatistics(props: props) {\n\treturn (\n\t\t<div className='CurrentGameStatistics'>\n\t\t\t\t<Indicator name='Time' value={`${insLeadZeroToTimer(Math.floor(props.gameTime / 60))}:${insLeadZeroToTimer(props.gameTime % 60 || 0 )}`}/>\n\t\t\t\t<Indicator name='Moves' value={props.movedCells}/>\n\t\t\t\t<Indicator name='Merges' value={props.cellMerges}/>\n\t\t\t\t<Indicator name='Score' value={props.score}/>\n\t\t\t</div>\n\t)\n}","import React, { CSSProperties } from \"react\";\nimport './GameCanvas.css'\nimport {gameCell} from '../../Const/generallInterfaces'\nimport { cellValueColorBelow8, cellValueColorMore8, colorForEmty, colorFor2, colorFor4, colorFor8, colorFor16,\tcolorFor32,\tcolorFor64,\tcolorFor128, colorFor256, transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight, lengthBetweenCells} from '../../Const/generalConsts'\n\ninterface props {gameCells: gameCell[], isCellAppearance: boolean, transitionDirection: string, cellAnimationEndHandler: Function, cellTransitionEndHandler: Function};\n\nfunction calcBgColor(value: number | null): string{\n\tlet result: string = '';\n\tswitch(value) {\n\t\tcase 2 : result = colorFor2; break;\n\t\tcase 4 : result = colorFor4; break;\n\t\tcase 8 : result = colorFor8; break;\n\t\tcase 16 : result = colorFor16; break;\n\t\tcase 32 : result = colorFor32; break;\n\t\tcase 64 : result = colorFor64; break;\n\t\tcase 128 : result = colorFor128; break;\n\t\tcase 256 : result = colorFor256; break;\n\t\tdefault: result = colorForEmty; break;\n\t}\n\treturn result;\n}\n\n\nfunction calcTranslateX(direction: string, path:number){\n\tswitch(direction) {\n\t\tcase transitionRight: return path * lengthBetweenCells;\n\t\tcase transitionLeft: return -path * lengthBetweenCells;\n\t\tdefault: return 0;\n\t}\n}\n\nfunction calcTranslateY(direction: string, path:number){\n\tswitch(direction) {\n\t\tcase transitionDown: return path * lengthBetweenCells;\n\t\tcase transitionUp: return -path * lengthBetweenCells;\n\t\tdefault: return 0;\n\t}\n}\nexport default function GameCanvas({gameCells, isCellAppearance, transitionDirection, cellAnimationEndHandler, cellTransitionEndHandler}:props) {\n\tconst widthHeight = `${100 / Math.sqrt(gameCells.length)}%`;\n\tconst gameCanvas = React.useRef<HTMLDivElement>(null)\n\tconst handleAppearAnimation = React.useRef(false);\n\tconst handleCellTransition = React.useRef(false);\n\n\thandleAppearAnimation.current = isCellAppearance;\n\thandleCellTransition.current = transitionDirection !== '';\n\n\n\tfunction innerCellAnimationEndHandler(){\n\t\tif (handleAppearAnimation.current) {\n\t\t\thandleAppearAnimation.current = false;\n\t\t\tcellAnimationEndHandler();\n\t\t\tif (gameCanvas.current){\n\t\t\t\tgameCanvas.current.removeEventListener('animationend', innerCellAnimationEndHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction innercellTransitionEndHandler() {\n\t\tif (handleCellTransition.current) {\n\t\t\thandleCellTransition.current = false;\n\t\t\tcellTransitionEndHandler();\n\t\t\tif (gameCanvas.current){\n\t\t\t\tgameCanvas.current.removeEventListener('transitionend', innercellTransitionEndHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn(\n\t\t<div ref={gameCanvas} className='GameCanvas' onAnimationEnd={innerCellAnimationEndHandler} onTransitionEnd={innercellTransitionEndHandler}>\n\n\t\t\t{\n\t\t\t\tgameCells.map((value: gameCell, index: number) => {\n\t\t\t\t\tconst displayedValue: number | null = transitionDirection ? value.prevValue : value.curValue;\n\t\t\t\t\tconst isCellTransitioned: boolean = transitionDirection !== '' &&  value.path !== 0;\n\n\t\t\t\t\tconst cellStyle: CSSProperties = {\n\t\t\t\t\t\tcolor: displayedValue !== null && displayedValue < 8   ? cellValueColorBelow8 : cellValueColorMore8,\n\t\t\t\t\t\tbackground: calcBgColor(displayedValue),\n\t\t\t\t\t\tanimation: isCellAppearance && value.prevValue !== value.curValue && value.curValue && value.isUpdatedOrNew ? 'insertNewCells .3s linear' : '',\n\t\t\t\t\t\ttransform: isCellTransitioned ? `translate(${calcTranslateX(transitionDirection, value.path)}%, ${calcTranslateY(transitionDirection, value.path)}%)` : '',\n\t\t\t\t\t\ttransition: isCellTransitioned ? 'transform .3s' : '',\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div ref={gameCanvas} key={index.toString()} className='GameCanvas-CellWrapper' style={{ width: widthHeight, height: widthHeight}} >\n\t\t\t\t\t\t\t<div className='GameCanvas-CellBackground'>\n\t\t\t\t\t\t\t\t<div className='GameCanvas-Cell' style={cellStyle}>\n\t\t\t\t\t\t\t\t\t{ displayedValue }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { isPropertyAccessExpression } from 'typescript'\nimport './SettingsPanel.css'\nimport {insLeadZeroToTimer} from '../../Const/generalConsts'\nfunction normalizeValue(value:number) {\n\treturn Math.round(value * 10) / 10;\n}\n\nexport default function SettingsPanel(props:any) {\n\treturn(\n\t\t<div className='SettingsWrapper'>\n\t\t\t<div className='settingsPanelName'>Settings:</div>\n\t\t\t<div className='Parameters'>\n\t\t\t\t<div className='Volume parameter'> Volume level: {insLeadZeroToTimer(normalizeValue(props.volume)   * 10) }\n\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t<input type='button' value='+' className='controlButton ' onClick={()=> props.setvolume( (prev:number) =>  prev < 1 ? normalizeValue(prev) + 0.1 : 1)}></input>\n\t\t\t\t\t\t<input type='button' value='-' className='controlButton' onClick={()=> props.setvolume( (prev:number) =>  prev > 0 ? normalizeValue(prev) - 0.1 : 0)}></input>\n\t\t\t\t\t\t<input type='button' value={`${normalizeValue(props.volume)  ?  'OFF' : 'ON'}`} className='controlButton' onClick={()=> props.setvolume( (prev:number) =>  prev ? 0 : 0.5)}></input>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* <div className='Volume parameter'> Volume: {props.volume }% {normalizeValue(props.volume)}\n\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t<input type='button' value='+' className='controlButton ' onClick={()=> props.setvolume( (prev:number) =>  prev < 1 ? prev + 0.1 : prev)}></input>\n\t\t\t\t\t\t<input type='button' value='-' className='controlButton' onClick={()=> props.setvolume( (prev:number) =>  prev > 0 ? prev - 0.1 : prev)}></input>\n\t\t\t\t\t\t<input type='button' value={`${props.volume ?  ' on' : 'off'}`} className='controlButton' onClick={()=> props.setvolume( (prev:number) =>  prev ? 0 : 0.5)}></input>\n\t\t\t\t\t</div>\n\t\t\t\t</div> */}\n\t\t\t</div>\n\t\t</div>\n\t)\n}","export default __webpack_public_path__ + \"static/media/points.6a2a0b58.wav\";","export default __webpack_public_path__ + \"static/media/move.f1e4d610.wav\";","export default __webpack_public_path__ + \"static/media/click.49635200.mp3\";","export default __webpack_public_path__ + \"static/media/noChange.df3e968c.flac\";","import React from 'react'\nimport \"./GameField.css\";\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\nimport CurrentGameStatistics from \"./CurrentGameStatistics/CurrentGameStatistics\";\nimport GameCanvas from './GameCanvas/GameCanvas'\nimport SettingsPanel from './SettingsPanel/SettingsPanel'\nimport useSound from 'use-sound';\n\nimport {gameCell} from '../Const/generallInterfaces'\nimport {transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight} from '../Const/generalConsts'\n\nimport points from '../sounds/points.wav'\nimport move from '../sounds/move.wav'\nimport click from'../sounds/click.mp3'\nimport noChange from '../sounds/noChange.flac'\n\n\nconst Events: string[] = [transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight]\n\nfunction getRandomNumber(maxValue: number): number{\n\treturn Math.floor(Math.random() * maxValue);\n}\n\nfunction getRandom2Or4Value(): gameCell{\n\tconst isTwo: boolean = Math.floor(Math.random() * 10) < 9;\n\treturn isTwo ? {\tcurValue: 2, prevValue: null, isUpdatedOrNew: true, path: 0} : {curValue: 4, prevValue: null, isUpdatedOrNew: true, path: 0};\n}\n\nfunction insertRandom2or4ValueToEmptyField(arr: gameCell[], numOfInserts: number, fieldSize: number):  gameCell[]{\n\tconst newGameCell: {indexForInsert:number, gameCell: gameCell}[] = [];\n\tconst arrOfFilledIndexes: number[] = [];\n\n\tfor (let index = 0; index < arr.length; index++) {\n\t\tif(arr[index].curValue !== null) {\n\t\t\tarrOfFilledIndexes.push(index);\n\t\t}\n\t}\n\n\tfor(let i: number = 1; i <= numOfInserts; i += 1) {\n\t\tlet searcValue: boolean = true;\n\n\t\twhile(searcValue) {\n\t\t\tlet indexForInsert: number = getRandomNumber(fieldSize ** 2);\n\t\t\tif(!arrOfFilledIndexes.includes(indexForInsert)) {\n\t\t\t\tsearcValue = false;\n\t\t\t\tarrOfFilledIndexes.push(indexForInsert)\n\t\t\t\tnewGameCell.push({indexForInsert, gameCell: getRandom2Or4Value()});\n\t\t\t}\n\t\t}\n\t}\n\n\tnewGameCell.forEach( (value) => arr[value.indexForInsert] = value.gameCell)\n\treturn arr;\n}\n\nfunction getEmptyGameCell(): gameCell{\n\treturn {curValue: null, prevValue: null, isUpdatedOrNew: false, path: 0};\n}\n\nfunction generateNewGame(fieldSize : number = 4): gameCell[]{\n\tconst numOfInsertedValuesOnNewGame = 2;\n\n\tlet array:gameCell[] = new Array(fieldSize ** 2).fill(getEmptyGameCell());\n\n\tfor (let index = 0; index < array.length; index++) {\n\t\tarray[index] = getEmptyGameCell();\n\t}\n\n\tarray = insertRandom2or4ValueToEmptyField(array, numOfInsertedValuesOnNewGame, fieldSize);\n\n\treturn array;\n}\n\n\n\nfunction calculateNewCellsState(gameCellsToChange:gameCell[], direction: string) :{isArrChanged: boolean, newArr :gameCell[], points: number, cellMerges: number, movedCells: number}{\n\tconst newArr = gameCellsToChange;\n\tlet isArrChanged: boolean = false;\n\tlet points: number = 0;\n\tlet cellMerges : number = 0;\n\tlet movedCells: number = 0;\n\tconst size = Math.sqrt(newArr.length);\n\tlet mainAxisStartIndex: number = 0;\n\tlet mainAxisOffset: number = 0;\n\tlet crossAxisOffset: number = 0;\n\tlet mainAxisLastIndex: number = 0;\n\n\tswitch (direction) {\n\t\tcase transitionUp: {\n\t\t\tmainAxisStartIndex = 0;\n\t\t\tmainAxisLastIndex = size - 1;\n\t\t\tmainAxisOffset = 1;\n\t\t\tcrossAxisOffset = size;\n\t\t\tbreak;\n\t\t}\n\n\t\tcase transitionDown: {\n\t\t\tmainAxisStartIndex = newArr.length - size;\n\t\t\tmainAxisLastIndex = newArr.length - 1;\n\t\t\tmainAxisOffset = 1;\n\t\t\tcrossAxisOffset = -size;\n\t\t\tbreak;\n\t\t}\n\n\t\tcase transitionLeft: {\n\t\t\tmainAxisStartIndex = 0;\n\t\t\tmainAxisLastIndex = newArr.length - size;\n\t\t\tmainAxisOffset = size;\n\t\t\tcrossAxisOffset = 1;\n\t\t\tbreak;\n\t\t}\n\n\t\tcase transitionRight: {\n\t\t\tmainAxisStartIndex = size - 1;\n\t\t\tmainAxisLastIndex = newArr.length - 1;\n\t\t\tmainAxisOffset = size;\n\t\t\tcrossAxisOffset = -1;\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {}\n\t}\n\n\tnewArr.forEach(cell => cell.prevValue = cell.curValue);\n\n\tfor (let curColumnIndex = mainAxisStartIndex; curColumnIndex <= mainAxisLastIndex; curColumnIndex += mainAxisOffset) {\n\t\tconst testArr = [];\n\n\t\tfor (let iteration = 0; iteration < size; iteration++) {\n\t\t\ttestArr.push(curColumnIndex + crossAxisOffset * iteration)\n\t\t}\n\n\t\t\tfor (let srcCellIndexForMove = curColumnIndex + crossAxisOffset; testArr.includes(srcCellIndexForMove); srcCellIndexForMove += crossAxisOffset) {\n\n\t\t\t\tlet curCheckRowNumber: number = 0;\n\t\t\t\tlet processAnalysis: boolean = true;\n\n\t\t\t\twhile(processAnalysis) {\n\t\t\t\t\tconst srcCellIndex: number = srcCellIndexForMove - (curCheckRowNumber * crossAxisOffset);\n\t\t\t\t\tconst srcCell: gameCell = newArr[srcCellIndex];\n\n\t\t\t\t\tconst dstCellIndex:number = srcCellIndex - crossAxisOffset;\n\t\t\t\t\tconst dstCell:gameCell = newArr[dstCellIndex];\n\n\n\t\t\t\t\tif (!srcCell || !dstCell || !testArr.includes(srcCellIndex) || !testArr.includes(dstCellIndex)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( srcCell.curValue ){\n\t\t\t\t\t\tif (dstCell !== undefined && (dstCell.curValue === null || (dstCell.curValue === srcCell.curValue && dstCell.isUpdatedOrNew === false && srcCell.isUpdatedOrNew === false))){\n\n\t\t\t\t\t\t\tif (dstCell.curValue === null) {\n\t\t\t\t\t\t\t\tdstCell.curValue = \tsrcCell.curValue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdstCell.curValue = dstCell.curValue * 2 ;\n\t\t\t\t\t\t\t\tdstCell.isUpdatedOrNew = true;\n\t\t\t\t\t\t\t\tpoints = +dstCell.curValue;\n\t\t\t\t\t\t\t\tcellMerges += 1;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsrcCell.curValue = null;\n\t\t\t\t\t\t\tnewArr[srcCellIndexForMove].path += 1;\n\t\t\t\t\t\t\tcurCheckRowNumber += 1;\n\t\t\t\t\t\t\tisArrChanged = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprocessAnalysis = false;\n\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcurCheckRowNumber += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newArr[srcCellIndexForMove].path > 0) {\n\t\t\t\tmovedCells +=1\n\t\t\t}\n\t\t}\n\t}\n\treturn { isArrChanged, newArr, points, cellMerges, movedCells};\n}\n\nfunction getCellsTransitionDirection(eventName: string): string {\n\n\tswitch(eventName){\n\t\tcase 'ArrowUp': return transitionUp;\n\t\tcase 'ArrowDown': return transitionDown;\n\t\tcase 'ArrowRight': return transitionRight;\n\t\tcase 'ArrowLeft': return transitionLeft;\n\t\tdefault: return '';\n\t}\n}\n\nexport default function GameField() {\n\tconst [gameStartTime, setgameStartTime] = React.useState(new Date().toISOString())//todo from storage\n\tconst [score, setscore] = React.useState(0);//todo from storage\n\tconst [cellMerges, setcellMerges] = React.useState(0);//todo from storage\n\tconst [movedCells, setmovedCells] = React.useState(0);//todo from storage\n\tconst [gameTime, setgameTime] = React.useState(0);//todo from storage\n\tconst [gameCells, setGameCells] = React.useState(generateNewGame())\n\tconst [fullScreenButtonValue, setfullScreenButtonValue] = React.useState<string>('Open in fullscreen');\n\tlet [isCellAppearance, setisCellAppearance] = React.useState(true);\n\tlet [transitionDirection, settransitionDirection] = React.useState('');\n\tlet cancalculateCelsNewState = React.useRef(false);\n\tlet gameWStatAndCanvasWrapper = React.useRef<HTMLDivElement>(null);\n\n\tconst [volume, setvolume] = React.useState(1)\n\tconst [pointsSound] = useSound(points, {volume});\n\tconst [moveSound] = useSound(move, {volume});\n\tconst [clickSound] = useSound(click, {volume});\n\tconst [noChangeSound] = useSound(noChange, {volume});\n\n\tconst keyDownHandler = React.useCallback((e: KeyboardEvent)=>{\n\t\tif(cancalculateCelsNewState.current) {\n\t\t\tcancalculateCelsNewState.current = false;\n\t\t\tconst cellTransitionDirection: string = getCellsTransitionDirection(e.key);\n\n\t\t\tif (Events.includes(cellTransitionDirection)) {\n\n\t\t\t\tconst {isArrChanged, newArr, points, cellMerges, movedCells } = calculateNewCellsState(gameCells, cellTransitionDirection);\n\n\t\t\t\tif (isArrChanged) {\n\t\t\t\t\tsetGameCells([...newArr])\n\t\t\t\t\tsettransitionDirection(cellTransitionDirection);\n\t\t\t\t\tsetscore( (curValue) => curValue + points);\n\t\t\t\t\tsetcellMerges( (curValue) => curValue + cellMerges);\n\t\t\t\t\tsetmovedCells((curValue) => curValue + movedCells);\n\t\t\t\t\tif (points) {\n\t\t\t\t\t\tpointsSound();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmoveSound();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetGameCells(insertRandom2or4ValueToEmptyField(gameCells, 1, Math.sqrt(gameCells.length)))\n\t\t\t\t\tsetisCellAppearance(true);\n\t\t\t\t\tnoChangeSound();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [gameCells])\n\n\n\tReact.useEffect(()=>{\n\t\twindow.addEventListener('keydown',keyDownHandler);\n\t\treturn () =>  window.removeEventListener('keydown',keyDownHandler);\n\t},[keyDownHandler])\n\n\tReact.useEffect(()=>{\n\t\tconst timeIncrementInterval = setInterval(()=> setgameTime((curTime)=> Math.floor(curTime + 1)), 1000)\n\t\treturn () =>  clearInterval(timeIncrementInterval);\n\t},[gameStartTime])\n\n\tfunction newGameHAndler() {\n\t\tclickSound();\n\t\tsetGameCells(generateNewGame());\n\t\tsetisCellAppearance(true)\n\t\tsetscore(0);\n\t\tsetcellMerges(0);\n\t\tsetmovedCells(0);\n\t\tsetgameTime(0);\n\t\tsetgameStartTime(new Date().toISOString())\n\t}\n\n\tfunction toggleFullScreen() {\n\t\tclickSound();\n\t\tif(document.fullscreenElement){\n\t\t\tdocument.exitFullscreen();\n\t\t\tsetfullScreenButtonValue('Open in fullscreen');\n\t\t} else {\n\t\t\tif (gameWStatAndCanvasWrapper.current !== null) {\n\t\t\t\tgameWStatAndCanvasWrapper.current.requestFullscreen();\n\t\t\t\tsetfullScreenButtonValue('Close fullscreen');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction cellAnimationEndHandler(){\n\t\t// pointsSound();\n\t\t// moveSound()\n\t\tsetisCellAppearance(false)\n\t\tsetGameCells(gameCells.map( (cell) => {\n\t\t\tcell.prevValue = null;\n\t\t\tcell.isUpdatedOrNew = false;\n\t\t\tcell.path = 0;\n\t\t\treturn cell;\n\t\t}));\n\t\tcancalculateCelsNewState.current = true;\n\t}\n\n\tfunction cellTransitionEndHandler (){\n\n\t\tsetGameCells(insertRandom2or4ValueToEmptyField(gameCells, 1, Math.sqrt(gameCells.length)));\n\t\tsetisCellAppearance(true);\n\t\tsettransitionDirection('');\n\t}\n\n\treturn (\n\t\t<div ref={gameWStatAndCanvasWrapper} className='GameField'>\n\t\t\t{/* <div ref={gameWStatAndCanvasWrapper} className='gameWStatAndCanvasWrapper'> */}\n\t\t\t<SettingsPanel volume={volume} setvolume={setvolume}/>\n\t\t\t<ControlPanel newGameHAndler={newGameHAndler} toggleFullScreen={toggleFullScreen} fullScreenButtonValue={fullScreenButtonValue}/>\n\n\t\t\t\t<CurrentGameStatistics\n\t\t\t\t\tscore={score}\n\t\t\t\t\tcellMerges={cellMerges}\n\t\t\t\t\tmovedCells={movedCells}\n\t\t\t\t\tgameTime={gameTime}\n\t\t\t\t/>\n\t\t\t\t<GameCanvas\n\t\t\t\t\tgameCells={gameCells}\n\t\t\t\t\tisCellAppearance={isCellAppearance}\n\t\t\t\t\ttransitionDirection={transitionDirection}\n\t\t\t\t\tcellAnimationEndHandler={cellAnimationEndHandler}\n\t\t\t\t\tcellTransitionEndHandler={cellTransitionEndHandler}\n\t\t\t\t/>\n\t\t\t{/* </div> */}\n\n\t\t</div>\n\t)\n}\n","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","export default __webpack_public_path__ + \"static/media/github.8eebd666.png\";","import React from 'react'\nimport './foter.css'\nimport schoolLogo from './rs_school_js.svg'\nimport githubLogo from './github.png'\n\nexport default function Footer() {\n\treturn(\n\t\t<footer>\n\t\t\t<a href=\"https://rs.school/js/\" target='blank'><div ><img src={schoolLogo} alt=\"schoolLogo\"/>RSS-School</div></a>\n\t\t\t<a href=\"https://github.com/thrvrce/react-game\" target='blank'><div><img src={githubLogo} alt=\"githubLogo\"/>Viktor Avdeev</div></a>\n\t\t\t<div>2021</div>\n\t\t</footer>\n\t)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport GameField from './components/GameField'\nimport Footer from './components/Footer/footer'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n\t\t<div className='mainContent'>\n\t\t\t<GameField/>\n\t\t\t<Footer/>\n\t\t</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}