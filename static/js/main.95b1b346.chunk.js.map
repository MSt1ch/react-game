{"version":3,"sources":["components/ControlPanel/ControlPanel.tsx","components/CurrentGameStatistics/Indicator/Indicator.tsx","Const/generalConsts.tsx","components/CurrentGameStatistics/CurrentGameStatistics.tsx","components/GameCanvas/GameCanvas.tsx","components/SettingsPanel/SettingsPanel.tsx","components/Message/Message.tsx","components/SavedGamesStat/StatTable.tsx","sounds/points.wav","sounds/move.wav","sounds/click.mp3","sounds/noChange.flac","sounds/loose.mp3","sounds/victory.wav","sounds/music.mp3","components/GameField.tsx","components/Footer/rs_school_js.svg","components/Footer/github.png","components/Footer/footer.tsx","index.tsx"],"names":["ControlPanel","newGameHAndler","toggleFullScreen","fullScreenButtonValue","autoplayHandler","togleSavedGamesStatisticsVsibility","className","type","value","onClick","Indicator","props","name","transitionUp","transitionDown","transitionLeft","transitionRight","lengthBetweenCells","saved2048GamesLC","keyboardCeilsControlEvents","autoplayNewGame","insLeadZeroToTimer","timeNumber","toString","getPrettyTimeFromSecondsOrMinutes","seconds","Math","floor","CurrentGameStatistics","gameTime","movedCells","cellMerges","score","calcBgColor","result","calcTranslateX","direction","path","calcTranslateY","GameCanvas","gameCells","isCellAppearance","transitionDirection","cellAnimationEndHandler","cellTransitionEndHandler","widthHeight","sqrt","length","gameCanvas","React","useRef","handleAppearAnimation","handleCellTransition","current","ref","onAnimationEnd","innerCellAnimationEndHandler","removeEventListener","onTransitionEnd","innercellTransitionEndHandler","map","index","displayedValue","prevValue","curValue","isCellTransitioned","fontSize","cellStyle","color","background","animation","isUpdatedOrNew","transform","transition","style","width","height","normalizeValue","round","SettingsPanel","setVolume","prev","volume","isEffectVolumeMuted","setisEffectVolumeMuted","ismusicVolumeMuted","setismusicVolumeMuted","fieldSize","onChange","e","fieldSizeSelecthandler","target","goal","goalHandler","gameForAutoplay","gameForAutoplayHandler","Message","isShowMessage","opacity","message","messageOkHandler","SavedGamesStat","isShowStatistics","savedGames","getSavedGames","savedGame","gameStartTime_Date","Date","gameStartTime","gameStartTimeEdited","getFullYear","getMonth","getDate","getHours","getMinutes","colSpan","tableData","directions","getRandomNumber","maxValue","random","insertRandom2or4ValueToEmptyField","arr","numOfInserts","newGameCell","arrOfFilledIndexes","push","i","searcValue","indexForInsert","includes","gameCell","forEach","generateNewGame","numOfInsertedValuesOnNewGame","array","Array","fill","calculateNewCellsState","gameCellsToChange","newArr","JSON","parse","stringify","isArrChanged","points","size","mainAxisStartIndex","mainAxisOffset","crossAxisOffset","mainAxisLastIndex","cell","curColumnIndex","testArr","iteration","srcCellIndexForMove","curCheckRowNumber","processAnalysis","srcCellIndex","srcCell","dstCellIndex","dstCell","undefined","localStorage","getItem","getInitialState","arrayOfSavedGames","toISOString","gameCellsHasValue","findIndex","GameField","useState","setgameStartTime","setscore","setcellMerges","setmovedCells","setgameTime","setfieldSize","setGameCells","setfullScreenButtonValue","setisCellAppearance","settransitionDirection","isAutoplay","setisAutoplay","setisShowMessage","setgoal","setmessage","efectsVolume","setfectsVolume","musicVolume","setmusicVolume","setisShowStatistics","setgameForAutoplay","useSound","pointsSound","move","moveSound","click","clickSound","noChange","noChangeSound","loose","looseSound","victory","victorySound","music","musicSound","isPlaying","stop","cancalculateCelsNewState","gameWStatAndCanvasWrapper","useEffect","keyDownHandler","useCallback","cellTransitionDirection","eventName","getCellsTransitionDirection","key","arrForChec","solvability–°heck","newGame","window","addEventListener","timeIncrementInterval","setInterval","curTime","clearInterval","interval","dispatchEvent","KeyboardEvent","newFieldSize","newGoal","gameType","document","fullscreenElement","exitFullscreen","requestFullscreen","gameToSave","currentGameSavedIndex","pop","unshift","setItem","saveGame","Number","Footer","href","src","schoolLogo","alt","githubLogo","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.95b1b346.chunk.js","sourcesContent":["import React from 'react'\n// import './ControlPanel.css'\n\ninterface ControlPAnel {\n\tnewGameHAndler: Function,\n\ttoggleFullScreen: Function,\n\tfullScreenButtonValue: string,\n\tautoplayHandler: Function,\n\ttogleSavedGamesStatisticsVsibility: Function\n}\n\nexport default function ControlPanel({newGameHAndler, toggleFullScreen, fullScreenButtonValue, autoplayHandler, togleSavedGamesStatisticsVsibility}: ControlPAnel) {\n\treturn(\n\t\t<div className='ControlPanel'>\n\t\t\t{/* <div>Nickname or login\\authorization</div> */}\n\t\t\t<input type='button' value='New Game' className=' controlButton' onClick={() => newGameHAndler()}></input>\n\t\t\t<input type='button' value='Game Statistics' className=' controlButton' onClick={ ()=> { togleSavedGamesStatisticsVsibility()}}></input>\n\t\t\t<input type='button' value={fullScreenButtonValue} className=' controlButton'onClick={() => { toggleFullScreen()}}></input>\n\t\t\t<input type='button' value='Autoplay' className='controlButton'onClick={() => autoplayHandler()}></input>\n\t\t</div>\n\t)\n}","import React from 'react'\n// import './Indicator.css'\n\ninterface Props {\n\tname: string,\n\tvalue: string | number,\n}\nexport default function Indicator(props: Props) {\n\treturn (\n\t\t<div className='Indicator'>\n\t\t\t<div className='Indicator-Name'>{props.name}</div>\n\t\t\t<div className='Indicator-Value'>{props.value}</div>\n\t\t</div>\n\t)\n}","const colorForEmty: string = 'rgba(0, 0, 0, 0)';//–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ü–≤–µ—Ç :D\nconst colorFor2: string = '#eee4da';\nconst colorFor4: string = '#eee1c9';\nconst colorFor8: string = '#f3b27a';\nconst colorFor16: string = '#f69664';\nconst colorFor32: string = '#f77c5f';\nconst colorFor64: string = '#f75f3b';\nconst colorFor128: string = '#edd073';\nconst colorFor256: string = '#edcc62';\nconst colorFor512: string = '#edc850';\nconst colorFor1024: string = '#edc53f';\nconst colorFor2048: string = '#edc22e';\n\n\nconst cellValueColorBelow8: string= '#776e65';\nconst cellValueColorMore8: string= '#f9f6f2';\n\nconst transitionUp: string = 'up';\nconst transitionDown: string = 'daown';\nconst transitionLeft: string = 'left';\nconst transitionRight: string = 'right';\n\nconst lengthBetweenCells: number = 100 / 85 *100; // —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã –∫–ª–∞—Å—Å–∞ GameCanvas-CellBackground –∏ GameCanvas-Cell.\nconst saved2048GamesLC = 'saved2048Games';\nconst keyboardCeilsControlEvents: string[] = ['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'];\n\nconst autoplayNewGame = 'New game';\nconst autoplayCurentGame = 'Current game';\n\nfunction insLeadZeroToTimer (timeNumber: number){\n  return  (timeNumber < 10 ? \"0\" : \"\") + timeNumber.toString();\n}\n\nfunction getPrettyTimeFromSecondsOrMinutes (seconds: number):string {\n\treturn `${insLeadZeroToTimer(Math.floor(seconds / 60))}:${insLeadZeroToTimer(seconds % 60 || 0 )}`\n}\n\nexport {\n\n\n\tcolorForEmty,\n\tcolorFor2,\n\tcolorFor4,\n\tcolorFor8,\n\tcolorFor16,\n\tcolorFor32,\n\tcolorFor64,\n\tcolorFor128,\n\tcolorFor256,\n\tcolorFor512,\n\tcolorFor1024,\n\tcolorFor2048,\n\n\tcellValueColorBelow8,\n\tcellValueColorMore8,\n\n\ttransitionUp,\n\ttransitionDown,\n\ttransitionLeft,\n\ttransitionRight,\n\n\tlengthBetweenCells,\n\tsaved2048GamesLC,\n\tkeyboardCeilsControlEvents,\n\n\tautoplayNewGame,\n\tautoplayCurentGame,\n\n\n\tinsLeadZeroToTimer,\n\tgetPrettyTimeFromSecondsOrMinutes,\n}","import React from \"react\";\n// import './CurrentGameStatistics.css'\nimport Indicator from \"./Indicator/Indicator\";\nimport { getPrettyTimeFromSecondsOrMinutes} from '../../Const/generalConsts'\ntype props ={\n\tscore:number,\n\tcellMerges:number,\n\tmovedCells: number,\n\tgameTime: number,\n}\n\nexport default function CurrentGameStatistics(props: props) {\n\treturn (\n\t\t<div className='CurrentGameStatistics'>\n\t\t\t\t<Indicator name='Time' value={getPrettyTimeFromSecondsOrMinutes(props.gameTime)}/>\n\t\t\t\t<Indicator name='Moves' value={props.movedCells}/>\n\t\t\t\t<Indicator name='Merges' value={props.cellMerges}/>\n\t\t\t\t<Indicator name='Score' value={props.score}/>\n\t\t\t</div>\n\t)\n}","import React, { CSSProperties } from \"react\";\n// import './GameCanvas.css'\nimport {gameCell} from '../../Const/generallInterfaces'\nimport { cellValueColorBelow8, cellValueColorMore8, colorForEmty, colorFor2, colorFor4, colorFor8, colorFor16,\tcolorFor32,\tcolorFor64,\tcolorFor128, colorFor256,colorFor512,\n\tcolorFor1024,\n\tcolorFor2048, transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight, lengthBetweenCells} from '../../Const/generalConsts'\n\ninterface props {gameCells: gameCell[], isCellAppearance: boolean, transitionDirection: string, cellAnimationEndHandler: Function, cellTransitionEndHandler: Function};\n\nfunction calcBgColor(value: number | null): string{\n\tlet result: string = '';\n\tswitch(value) {\n\t\tcase 2 : result = colorFor2; break;\n\t\tcase 4 : result = colorFor4; break;\n\t\tcase 8 : result = colorFor8; break;\n\t\tcase 16 : result = colorFor16; break;\n\t\tcase 32 : result = colorFor32; break;\n\t\tcase 64 : result = colorFor64; break;\n\t\tcase 128 : result = colorFor128; break;\n\t\tcase 256 : result = colorFor256; break;\n\t\tcase 512 : result = colorFor512; break;\n\t\tcase 1024 : result = colorFor1024; break;\n\t\tcase 2048 : result = colorFor2048; break;\n\t\tdefault: result = colorForEmty; break;\n\t}\n\treturn result;\n}\n\n\nfunction calcTranslateX(direction: string, path:number){\n\tswitch(direction) {\n\t\tcase transitionRight: return path * lengthBetweenCells;\n\t\tcase transitionLeft: return -path * lengthBetweenCells;\n\t\tdefault: return 0;\n\t}\n}\n\nfunction calcTranslateY(direction: string, path:number){\n\tswitch(direction) {\n\t\tcase transitionDown: return path * lengthBetweenCells;\n\t\tcase transitionUp: return -path * lengthBetweenCells;\n\t\tdefault: return 0;\n\t}\n}\nexport default function GameCanvas({gameCells, isCellAppearance, transitionDirection, cellAnimationEndHandler, cellTransitionEndHandler}:props) {\n\tconst widthHeight = `${100 / Math.sqrt(gameCells.length)}%`;\n\tconst gameCanvas = React.useRef<HTMLDivElement>(null)\n\tconst handleAppearAnimation = React.useRef(false);\n\tconst handleCellTransition = React.useRef(false);\n\n\thandleAppearAnimation.current = isCellAppearance;\n\thandleCellTransition.current = transitionDirection !== '';\n\n\n\tfunction innerCellAnimationEndHandler(){\n\t\tif (handleAppearAnimation.current) {\n\t\t\thandleAppearAnimation.current = false;\n\t\t\tcellAnimationEndHandler();\n\t\t\tif (gameCanvas.current){\n\t\t\t\tgameCanvas.current.removeEventListener('animationend', innerCellAnimationEndHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction innercellTransitionEndHandler() {\n\t\tif (handleCellTransition.current) {\n\t\t\thandleCellTransition.current = false;\n\t\t\tcellTransitionEndHandler();\n\t\t\tif (gameCanvas.current){\n\t\t\t\tgameCanvas.current.removeEventListener('transitionend', innercellTransitionEndHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn(\n\t\t<div ref={gameCanvas} className='GameCanvas' onAnimationEnd={innerCellAnimationEndHandler} onTransitionEnd={innercellTransitionEndHandler}>\n\n\t\t\t{\n\t\t\t\tgameCells.map((value: gameCell, index: number) => {\n\t\t\t\t\tconst displayedValue: number | null = transitionDirection ? value.prevValue : value.curValue;\n\t\t\t\t\tconst isCellTransitioned: boolean = transitionDirection !== '' &&  value.path !== 0;\n\n\t\t\t\t\tlet fontSize: number = 2;\n\t\t\t\t\tif (displayedValue){\n\t\t\t\t\t\tif (displayedValue > 512) {\n\t\t\t\t\t\t\tfontSize = 1.2;\n\t\t\t\t\t\t} else if (displayedValue > 64) {\n\t\t\t\t\t\t\tfontSize = 1.6;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cellStyle: CSSProperties = {\n\t\t\t\t\t\tcolor: displayedValue !== null && displayedValue < 8   ? cellValueColorBelow8 : cellValueColorMore8,\n\t\t\t\t\t\tbackground: calcBgColor(displayedValue),\n\t\t\t\t\t\tanimation: isCellAppearance && value.prevValue !== value.curValue && value.curValue && value.isUpdatedOrNew ? 'insertNewCells .3s linear' : '',\n\t\t\t\t\t\ttransform: isCellTransitioned ? `translate(${calcTranslateX(transitionDirection, value.path)}%, ${calcTranslateY(transitionDirection, value.path)}%)` : '',\n\t\t\t\t\t\ttransition: isCellTransitioned ? 'transform .3s' : '',\n\t\t\t\t\t\tfontSize: `${fontSize}rem`,\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div ref={gameCanvas} key={index.toString()} className='GameCanvas-CellWrapper' style={{ width: widthHeight, height: widthHeight}} >\n\t\t\t\t\t\t\t<div className='GameCanvas-CellBackground'>\n\t\t\t\t\t\t\t\t<div className='GameCanvas-Cell' style={cellStyle}>\n\t\t\t\t\t\t\t\t\t{ displayedValue }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n","import React from 'react'\n// import './SettingsPanel.css'\nimport {insLeadZeroToTimer, autoplayNewGame, autoplayCurentGame} from '../../Const/generalConsts'\nfunction normalizeValue(value:number) {\n\treturn Math.round(value * 10) / 10;\n}\n\n\nexport default function SettingsPanel(props:any) {\n\treturn(\n\t\t<div className='SettingsWrapper'>\n\t\t\t<div className='settingsPanelName'>Settings:</div>\n\t\t\t\t<div className='Parameters'>\n\t\t\t\t\t<div className='Volume parameter'> Volume level\n\t\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t\t<input type='button' value='+' className='controlButton ' onClick={()=> props.setVolume( (prev:number) =>  prev < 1 ? normalizeValue(prev) + 0.1 : 1)}></input>\n\t\t\t\t\t\t\t{insLeadZeroToTimer(normalizeValue(props.volume)   * 10) }\n\t\t\t\t\t\t\t<input type='button' value='-' className='controlButton' onClick={()=> props.setVolume( (prev:number) =>  prev > 0 ? normalizeValue(prev) - 0.1 : 0)}></input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input type='button' value={`Sound ${props.isEffectVolumeMuted  ?  'OFF' : 'ON'}`} className='controlButton' onClick={ ()=> props.setisEffectVolumeMuted( !props.isEffectVolumeMuted)}></input>\n\t\t\t\t\t\t<input type='button' value={`Music ${props.ismusicVolumeMuted  ?  'OFF' : 'ON'}`} className='controlButton' onClick={()=> props.setismusicVolumeMuted(!props.ismusicVolumeMuted)}></input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div >\n\t\t\t\t\t\t<div className='GameParemetersWrapper'>\n\t\t\t\t\t\t\t<div className='fieldSize parameter'> Field size\n\t\t\t\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t\t\t\t<select name=\"fieldSize\" className='controlButton ' value={props.fieldSize} onChange={ (e) =>props.fieldSizeSelecthandler(e.target.value)}>\n\t\t\t\t\t\t\t\t\t\t<option value={3}>3</option>\n\t\t\t\t\t\t\t\t\t\t<option value={4}>4</option>\n\t\t\t\t\t\t\t\t\t\t<option value={5}>5</option>\n\t\t\t\t\t\t\t\t\t\t<option value={6}>6</option>\n\t\t\t\t\t\t\t\t\t\t<option value={7}>7</option>\n\t\t\t\t\t\t\t\t\t\t<option value={8}>8</option>\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='goal parameter'> Current goal\n\t\t\t\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t\t\t\t<select name=\"goal\" className='controlButton ' value={props.goal} onChange={(e) => props.goalHandler(e.target.value)}>\n\t\t\t\t\t\t\t\t\t\t<option value={16}>16</option>\n\t\t\t\t\t\t\t\t\t\t<option value={32}>32</option>\n\t\t\t\t\t\t\t\t\t\t<option value={64}>64</option>\n\t\t\t\t\t\t\t\t\t\t<option value={128}>128</option>\n\t\t\t\t\t\t\t\t\t\t<option value={256}>256</option>\n\t\t\t\t\t\t\t\t\t\t<option value={512}>512</option>\n\t\t\t\t\t\t\t\t\t\t<option value={1024}>1024</option>\n\t\t\t\t\t\t\t\t\t\t<option value={2048}>2048</option>\n\t\t\t\t\t\t\t\t\t\t<option value={4096}>4096</option>\n\t\t\t\t\t\t\t\t\t\t<option value={8192}>8192</option>\n\t\t\t\t\t\t\t\t\t\t<option value={16384}>16384</option>\n\t\t\t\t\t\t\t\t\t\t<option value={32768}>32768</option>\n\t\t\t\t\t\t\t\t\t\t<option value={65536}>65536</option>\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='autopilot parameter'>Game for autoplay\n\t\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t\t<select name=\"autopilot\" className='controlButton ' value={props.gameForAutoplay} onChange={(e) => props.gameForAutoplayHandler(e.target.value)}>\n\t\t\t\t\t\t\t\t<option value={autoplayNewGame}>New game</option>\n\t\t\t\t\t\t\t\t<option value={autoplayCurentGame}>Current game</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React from 'react'\n\ntype messageProps = {\n\tisShowMessage: boolean,\n\tmessage: string,\n\tmessageOkHandler: Function,\n\n}\nexport default function Message(props: messageProps) {\n\treturn (\n\t\t<div className='hiddenPAnel Message' style={{transform: props.isShowMessage ? 'translate(0%, 750%)' : '', opacity: props.isShowMessage ? '1' : '0'}}>\n\t\t\t<div className='MessageTitle'>{props.message}</div>\n\t\t\t<input type=\"button\" className='controlButton' value='OK' onClick={()=>props.messageOkHandler()}/>\n\t\t</div>\n\t)\n}","import React from \"react\";\nimport { getPrettyTimeFromSecondsOrMinutes} from '../../Const/generalConsts'\nexport default function SavedGamesStat(props: any) {\n\n\n\tconst tableData = () => {\n\t\tconst savedGames = props.getSavedGames();\n\t\tif(savedGames.length) {\n\t\t\treturn savedGames.map( (savedGame:any)=> {\n\t\t\t\tconst gameStartTime_Date =new Date(savedGame.gameStartTime)\n\t\t\t\tconst gameStartTimeEdited =\n\t\t\t\t`${gameStartTime_Date.getFullYear()}/${gameStartTime_Date.getMonth()+1}/${gameStartTime_Date.getDate()} ${getPrettyTimeFromSecondsOrMinutes(gameStartTime_Date.getHours() * 60 +  gameStartTime_Date.getMinutes() )}`\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={savedGame.gameStartTime}>\n\t\t\t\t\t\t<td>{gameStartTimeEdited}</td>\n\t\t\t\t\t\t<td>{getPrettyTimeFromSecondsOrMinutes(savedGame.gameTime)}</td>\n\t\t\t\t\t\t<td>{savedGame.movedCells}</td>\n\t\t\t\t\t\t<td>{savedGame.cellMerges}</td>\n\t\t\t\t\t\t<td>{savedGame.score}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t)\n\t\t\t})\n\t\t} else {\n\t\t\treturn <tr> <td colSpan={5}> No saved games! </td> </tr>;\n\t\t}\n\t}\n\treturn (\n    <div className='savedGamesStat hiddenPAnel' style={{transform: props.isShowStatistics ? 'translate(0rem, 50rem)' : '', opacity: props.isShowStatistics ? '1' : '0'}}>\n\t\t\t<table>\n\t\t\t\t<caption>Previous ten games statistic</caption>\n\t\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t<th>Game start time</th><th>Time</th><th>Moves</th><th>Merges</th><th>Score</th>\n\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t{tableData()}\n\t\t\t\t</tbody>\n\t\t\t</table>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/points.6a2a0b58.wav\";","export default __webpack_public_path__ + \"static/media/move.f1e4d610.wav\";","export default __webpack_public_path__ + \"static/media/click.49635200.mp3\";","export default __webpack_public_path__ + \"static/media/noChange.df3e968c.flac\";","export default __webpack_public_path__ + \"static/media/loose.410bfa26.mp3\";","export default __webpack_public_path__ + \"static/media/victory.1806f59f.wav\";","export default __webpack_public_path__ + \"static/media/music.7ca942e2.mp3\";","import React from 'react'\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\nimport CurrentGameStatistics from \"./CurrentGameStatistics/CurrentGameStatistics\";\nimport GameCanvas from './GameCanvas/GameCanvas'\nimport SettingsPanel from './SettingsPanel/SettingsPanel'\nimport Message from './Message/Message'\nimport useSound from 'use-sound';\nimport SavedGamesStat from './SavedGamesStat/StatTable'\nimport {gameCell} from '../Const/generallInterfaces'\nimport {autoplayNewGame, transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight, saved2048GamesLC, keyboardCeilsControlEvents} from '../Const/generalConsts'\n\nimport points from '../sounds/points.wav'\nimport move from '../sounds/move.wav'\nimport click from'../sounds/click.mp3'\nimport noChange from '../sounds/noChange.flac'\nimport loose from '../sounds/loose.mp3'\nimport victory from '../sounds/victory.wav'\nimport music from '../sounds/music.mp3'\n\n\nconst directions: string[] = [transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight]\n\nfunction getRandomNumber(maxValue: number): number{\n  return Math.floor(Math.random() * maxValue);\n}\n\nfunction getRandom2Or4Value(): gameCell{\n  const isTwo: boolean = Math.floor(Math.random() * 10) < 9;\n  return isTwo ? {\tcurValue: 2, prevValue: null, isUpdatedOrNew: true, path: 0} : {curValue: 4, prevValue: null, isUpdatedOrNew: true, path: 0};\n}\n\nfunction insertRandom2or4ValueToEmptyField(arr: gameCell[], numOfInserts: number, fieldSize: number):  gameCell[]{\n  const newGameCell: {indexForInsert:number, gameCell: gameCell}[] = [];\n  const arrOfFilledIndexes: number[] = [];\n\n  for (let index = 0; index < arr.length; index++) {\n    if(arr[index].curValue !== null) {\n      arrOfFilledIndexes.push(index);\n    }\n  }\n\tif (arrOfFilledIndexes.length !== arr.length) {\n\t\tfor(let i: number = 1; i <= numOfInserts; i += 1) {\n\t\t\tlet searcValue: boolean = true;\n\n\t\t\twhile(searcValue) {\n\t\t\t\tlet indexForInsert: number = getRandomNumber(fieldSize ** 2);\n\t\t\t\tif(!arrOfFilledIndexes.includes(indexForInsert)) {\n\t\t\t\t\tsearcValue = false;\n\t\t\t\t\tarrOfFilledIndexes.push(indexForInsert)\n\t\t\t\t\tnewGameCell.push({indexForInsert, gameCell: getRandom2Or4Value()});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnewGameCell.forEach( (value) => arr[value.indexForInsert] = value.gameCell)\n\t}\n\n  return arr;\n}\n\nfunction getEmptyGameCell(): gameCell{\n  return {curValue: null, prevValue: null, isUpdatedOrNew: false, path: 0};\n}\n\nfunction generateNewGame(fieldSize : number = 4): gameCell[]{\n  const numOfInsertedValuesOnNewGame = 2;\n\n  let array:gameCell[] = new Array(fieldSize ** 2).fill(getEmptyGameCell());\n\n  for (let index = 0; index < array.length; index++) {\n    array[index] = getEmptyGameCell();\n  }\n\n  array = insertRandom2or4ValueToEmptyField(array, numOfInsertedValuesOnNewGame, fieldSize);\n\n  return array;\n}\n\nfunction calculateNewCellsState(gameCellsToChange:gameCell[], direction: string) :{isArrChanged: boolean, newArr :gameCell[], points: number, cellMerges: number, movedCells: number}{\n  const newArr:gameCell[] = JSON.parse(JSON.stringify(gameCellsToChange));\n  let isArrChanged: boolean = false;\n  let points: number = 0;\n  let cellMerges : number = 0;\n  let movedCells: number = 0;\n  const size = Math.sqrt(newArr.length);\n  let mainAxisStartIndex: number = 0;\n  let mainAxisOffset: number = 0;\n  let crossAxisOffset: number = 0;\n  let mainAxisLastIndex: number = 0;\n\n  switch (direction) {\n    case transitionUp: {\n      mainAxisStartIndex = 0;\n      mainAxisLastIndex = size - 1;\n      mainAxisOffset = 1;\n      crossAxisOffset = size;\n      break;\n    }\n\n    case transitionDown: {\n      mainAxisStartIndex = newArr.length - size;\n      mainAxisLastIndex = newArr.length - 1;\n      mainAxisOffset = 1;\n      crossAxisOffset = -size;\n      break;\n    }\n\n    case transitionLeft: {\n      mainAxisStartIndex = 0;\n      mainAxisLastIndex = newArr.length - size;\n      mainAxisOffset = size;\n      crossAxisOffset = 1;\n      break;\n    }\n\n    case transitionRight: {\n      mainAxisStartIndex = size - 1;\n      mainAxisLastIndex = newArr.length - 1;\n      mainAxisOffset = size;\n      crossAxisOffset = -1;\n      break;\n    }\n    default: {}\n  }\n\n  newArr.forEach(cell => cell.prevValue = cell.curValue);\n\n  for (let curColumnIndex = mainAxisStartIndex; curColumnIndex <= mainAxisLastIndex; curColumnIndex += mainAxisOffset) {\n    const testArr = [];\n    for (let iteration = 0; iteration < size; iteration++) {\n      testArr.push(curColumnIndex + crossAxisOffset * iteration)\n    }\n    for (let srcCellIndexForMove = curColumnIndex + crossAxisOffset; testArr.includes(srcCellIndexForMove); srcCellIndexForMove += crossAxisOffset) {\n      let curCheckRowNumber: number = 0;\n      let processAnalysis: boolean = true;\n      while(processAnalysis) {\n        const srcCellIndex: number = srcCellIndexForMove - (curCheckRowNumber * crossAxisOffset);\n        const srcCell: gameCell = newArr[srcCellIndex];\n        const dstCellIndex:number = srcCellIndex - crossAxisOffset;\n        const dstCell:gameCell = newArr[dstCellIndex];\n        if (!srcCell || !dstCell || !testArr.includes(srcCellIndex) || !testArr.includes(dstCellIndex)) {\n          break;\n        }\n        if ( srcCell.curValue ){\n          if (dstCell !== undefined && (dstCell.curValue === null || (dstCell.curValue === srcCell.curValue && dstCell.isUpdatedOrNew === false && srcCell.isUpdatedOrNew === false))){\n            if (dstCell.curValue === null) {\n              dstCell.curValue = \tsrcCell.curValue;\n            } else {\n              dstCell.curValue = dstCell.curValue * 2 ;\n              dstCell.isUpdatedOrNew = true;\n              points = +dstCell.curValue;\n              cellMerges += 1;\n            }\n            srcCell.curValue = null;\n            newArr[srcCellIndexForMove].path += 1;\n            curCheckRowNumber += 1;\n            isArrChanged = true;\n          } else {\n            processAnalysis = false;\n          }\n      } else {\n        curCheckRowNumber += 1;\n      }\n    }\n\n    if (newArr[srcCellIndexForMove].path > 0) {\n      movedCells +=1\n    }\n  }\n  }\n  return { isArrChanged, newArr, points, cellMerges, movedCells};\n}\n\nfunction solvability–°heck (arrForChec: gameCell[]) {\n\tfor (let index = 0; index < directions.length; index++) {\n\t\tconst {isArrChanged} = calculateNewCellsState(arrForChec, directions[index]);\n\t\tif (isArrChanged) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction getCellsTransitionDirection(eventName: string): string {\n\n  switch(eventName){\n    case 'ArrowUp': return transitionUp;\n    case 'ArrowDown': return transitionDown;\n    case 'ArrowRight': return transitionRight;\n    case 'ArrowLeft': return transitionLeft;\n    default: return '';\n  }\n}\n\nfunction getSavedGames() {\n  const savedGame = localStorage.getItem(saved2048GamesLC);\n  return savedGame ? JSON.parse(savedGame) : [];\n}\n\ntype savedGame = {\n\tgameCells:gameCell[], score:number, cellMerges: number, movedCells:number, gameTime:number, volume:number, fieldSize: number, gameStartTime: string, goal: number, isEffectVolumeMuted:boolean, ismusicVolumeMuted: boolean, efectsVolume:number, musicVolume:number, gameForAutoplay: string\n}\nfunction saveGame (gameToSave: savedGame) {\n  const arrayOfSavedGames = getSavedGames();\n\tconst currentGameSavedIndex = arrayOfSavedGames.findIndex( (savedGame: savedGame) =>  savedGame.gameStartTime === gameToSave.gameStartTime);\n\n\tif (currentGameSavedIndex !== -1 && currentGameSavedIndex === 0) {\n\t\tarrayOfSavedGames[currentGameSavedIndex] = \tgameToSave;\n\t} else {\n\t\tif (arrayOfSavedGames.length > 9) {\n\t\t\tarrayOfSavedGames.pop();\n\t\t}\n\t\tarrayOfSavedGames.unshift(gameToSave);\n\t}\n\n  localStorage.setItem(saved2048GamesLC, JSON.stringify(arrayOfSavedGames));\n}\n\nconst getInitialState = (type: string)=> {\n\tconst arrayOfSavedGames = getSavedGames();\n\tif (arrayOfSavedGames.length === 0) {\n    switch(type){\n\t\t\tcase 'gameStartTime': return new Date().toISOString();\n\t\t\tcase 'score' :\n\t\t\tcase 'cellMerges' :\n\t\t\tcase 'movedCells':\n\t\t\tcase 'gameTime' : return 0;\n\n\t\t\tcase 'fieldSize': return 4;\n\t\t\tcase 'gameCells': return generateNewGame();\n\t\t\tcase 'goal': return 2048;\n\n\t\t\tcase 'musicVolume' :\n\t\t\tcase 'efectsVolume' :\n\t\t\tcase 'volume' : return 0.5;\n\n\t\t\tcase 'isEffectVolumeMuted':\n\t\t\tcase \t'ismusicVolumeMuted': return false;\n\t\t\tcase 'gameForAutoplay': return autoplayNewGame;\n\t\t}\n  } else {\n    return  arrayOfSavedGames[0][type];\n  }\n}\n\nfunction gameCellsHasValue(arr: gameCell[], value: number | null) {\n\treturn arr.findIndex( (cell) => cell.curValue === value ) !== -1;\n}\n\nexport default function GameField() {\n  const [gameStartTime        , setgameStartTime        ] = React.useState(getInitialState('gameStartTime'))\n  const [score\t\t\t\t        , setscore\t\t\t\t\t\t\t\t] = React.useState(getInitialState('score'));\n  const [cellMerges\t\t        , setcellMerges\t\t\t\t\t\t] = React.useState(getInitialState('cellMerges'));\n  const [movedCells\t\t        , setmovedCells\t\t\t\t\t\t] = React.useState(getInitialState('movedCells'));\n  const [gameTime\t\t\t        , setgameTime\t\t\t\t\t\t\t] = React.useState(getInitialState('gameTime'));\n  const [fieldSize\t\t        , setfieldSize\t\t\t\t\t\t] = React.useState(getInitialState('fieldSize'))\n  const [gameCells\t\t        , setGameCells\t\t\t\t\t\t] = React.useState(getInitialState('gameCells'))\n  const [fullScreenButtonValue, setfullScreenButtonValue] = React.useState<string>('Open in fullscreen');\n  const [isCellAppearance\t\t\t, setisCellAppearance\t\t\t] = React.useState(true);\n  const [transitionDirection\t, settransitionDirection\t] = React.useState('');\n\tconst [isAutoplay\t\t\t\t\t\t, setisAutoplay\t\t\t\t\t\t] = React.useState(false);\n\tconst [isShowMessage\t\t\t\t, setisShowMessage\t\t\t\t] = React.useState(false);\n\tconst [goal\t\t\t\t\t\t\t\t\t, setgoal\t\t\t\t\t\t\t\t\t] = React.useState(getInitialState('goal'));\n\tconst [message\t\t\t\t\t\t\t, setmessage\t\t\t\t\t\t\t] = React.useState('');\n\tconst [volume\t\t\t\t\t\t\t\t, setVolume\t\t\t\t\t\t\t\t] = React.useState(getInitialState('volume'))\n\tconst [efectsVolume\t\t\t\t\t, setfectsVolume\t\t\t\t\t] = React.useState(getInitialState('efectsVolume'))\n\tconst [musicVolume\t\t\t\t\t, setmusicVolume\t\t\t\t\t] = React.useState(getInitialState('musicVolume'))\n\tconst [isEffectVolumeMuted\t, setisEffectVolumeMuted\t] = React.useState(getInitialState('isEffectVolumeMuted'))\n\tconst [ismusicVolumeMuted\t\t, setismusicVolumeMuted\t\t] = React.useState(getInitialState('ismusicVolumeMuted'))\n\tconst [isShowStatistics\t\t\t, setisShowStatistics\t\t\t] = React.useState(false);\n\tconst [gameForAutoplay      , setgameForAutoplay      ] = React.useState(getInitialState('gameForAutoplay'));// todo from saved\n\tconst [pointsSound\t\t\t\t\t\t\t\t\t] = useSound(points, {volume: efectsVolume});\n  const [moveSound\t\t\t\t\t\t\t\t\t\t] = useSound(move, {volume: efectsVolume});\n  const [clickSound\t\t\t\t\t\t\t\t\t\t] = useSound(click, {volume: efectsVolume});\n  const [noChangeSound\t\t\t\t\t\t\t\t] = useSound(noChange, {volume: efectsVolume});\n\tconst [looseSound\t\t\t\t\t\t\t\t\t\t] = useSound(loose, {volume: efectsVolume});\n\tconst [victorySound\t\t\t\t\t\t\t\t\t] = useSound(victory, {volume:efectsVolume});\n\tconst [musicSound, {isPlaying, stop}] = useSound(music, {volume: musicVolume});\n\n\tconst cancalculateCelsNewState  = React.useRef(false);\n  const gameWStatAndCanvasWrapper = React.useRef<HTMLDivElement>(null);\n\n\tReact.useEffect( ()=> {\n\t\tif (isEffectVolumeMuted) {\n\t\t\tsetfectsVolume(0);\n\t\t} else {\n\t\t\tsetfectsVolume(volume);\n\t\t}\n\t\tif (ismusicVolumeMuted) {\n\t\t\tsetmusicVolume(0);\n\t\t}\telse {\n\t\t\tsetmusicVolume(volume);\n\t\t}\n\t}, [volume, isEffectVolumeMuted, ismusicVolumeMuted])\n\n  const keyDownHandler = React.useCallback((e: KeyboardEvent)=>{\n\n    if(cancalculateCelsNewState.current) {\n\n      cancalculateCelsNewState.current = false;\n      const cellTransitionDirection: string = getCellsTransitionDirection(e.key);\n      if (directions.includes(cellTransitionDirection)) {\n        const {isArrChanged, newArr, points, cellMerges, movedCells } = calculateNewCellsState(gameCells, cellTransitionDirection);\n        if (isArrChanged) {\n          setGameCells([...newArr])\n          settransitionDirection(cellTransitionDirection);\n          setscore( (curValue:number) => curValue + points);\n          setcellMerges( (curValue:number) => curValue + cellMerges);\n          setmovedCells((curValue:number) => curValue + movedCells);\n          if (points) {\n            pointsSound();\n          } else {\n            moveSound();\n          }\n        } else if (!gameCellsHasValue(gameCells, null)){\n\t\t\t\t\tif (solvability–°heck(gameCells)) {\n\t\t\t\t\t\tnoChangeSound();\n\t\t\t\t\t\tcancalculateCelsNewState.current = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isAutoplay) {\n\t\t\t\t\t\t\tsetisAutoplay(false)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetmessage('You loose (no available moves)');\n\t\t\t\t\t\tsetisShowMessage(true);\n\t\t\t\t\t\tlooseSound();\n\t\t\t\t\t\tcancalculateCelsNewState.current = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n          setGameCells(insertRandom2or4ValueToEmptyField(gameCells, 1, Math.sqrt(gameCells.length)))\n          setisCellAppearance(true);\n          noChangeSound();\n        }\n      } else {\n\t\t\t\tcancalculateCelsNewState.current = true;\n\t\t\t}\n    }\n  }, [gameCells, pointsSound, moveSound, noChangeSound, looseSound, isAutoplay])\n\n  const newGame = React.useCallback ( ()=> {\n    clickSound();\n    setisCellAppearance(true)\n    setgameStartTime(new Date().toISOString());\n    setscore(0);\n    setcellMerges(0);\n    setmovedCells(0);\n    setgameTime(0);\n    setGameCells(generateNewGame(fieldSize));\n  }, [fieldSize, clickSound])\n\n  React.useEffect(() => {\n\t\tcancalculateCelsNewState.current = true;\n  }, [])\n\n\tReact.useEffect( () => {\n\t\tmusicSound();\n\t\treturn () => {stop()};\n\t}, [musicSound, isPlaying,stop])\n\n  React.useEffect(()=>{\n    window.addEventListener('keydown',keyDownHandler);\n    return () =>  window.removeEventListener('keydown',keyDownHandler);\n  },[keyDownHandler])\n\n  React.useEffect(()=>{\n    const timeIncrementInterval = setInterval(()=> setgameTime((curTime:number)=> Math.floor(curTime + 1)), 1000)\n    return () =>  clearInterval(timeIncrementInterval);\n  },[gameStartTime])\n\n  React.useEffect(() => {\n    let interval: any;\n    if (isAutoplay) {\n      const getRandomKeyDownevent = ()=> {\n        return new KeyboardEvent('keydown', {key: keyboardCeilsControlEvents[getRandomNumber(4)]});\n      }\n      interval = setInterval(() => window.dispatchEvent(getRandomKeyDownevent()) , 1000);\n    }\n    return () =>  clearInterval(interval);\n  }, [isAutoplay])\n\n  function newGameHAndler() {\n    setisAutoplay(false);\n    newGame();\n  }\n\n  function toggleFullScreen() {\n    clickSound();\n    if(document.fullscreenElement){\n      document.exitFullscreen();\n      setfullScreenButtonValue('Open in fullscreen');\n    } else {\n      if (gameWStatAndCanvasWrapper.current !== null) {\n        gameWStatAndCanvasWrapper.current.requestFullscreen();\n        setfullScreenButtonValue('Close fullscreen');\n      }\n    }\n  }\n\n  function cellAnimationEndHandler(){\n    setisCellAppearance(false)\n    setGameCells(gameCells.map( (cell:gameCell) => {\n      cell.prevValue = null;\n      cell.isUpdatedOrNew = false;\n      cell.path = 0;\n      return cell;\n    }));\n    saveGame ( {gameCells, score, cellMerges, movedCells, gameTime, volume, fieldSize, gameStartTime, goal, isEffectVolumeMuted, ismusicVolumeMuted, efectsVolume, musicVolume, gameForAutoplay}) ;\n\t\tif(gameCellsHasValue(gameCells, Number(goal))) {\n\t\t\tvictorySound();\n\t\t\tif (isAutoplay) {\n\t\t\t\tsetisAutoplay(false)\n\t\t\t\tsetmessage(`Wow, autoplay reach ${goal}!`);\n\t\t\t} else {\n\t\t\t\tsetmessage(`Goal ${goal} reached! Try change goal and continue`);\n\t\t\t}\n\t\t\tsetisShowMessage(true);\n\t\t} else {\n\n\t\t}\n\t\tcancalculateCelsNewState.current = true;\n  }\n\n  function cellTransitionEndHandler (){\n    setGameCells(insertRandom2or4ValueToEmptyField(gameCells, 1, Math.sqrt(gameCells.length)));\n    setisCellAppearance(true);\n    settransitionDirection('');\n  }\n\n  function fieldSizeSelecthandler(newFieldSize: number) {\n    setfieldSize(newFieldSize);\n  }\n\n  function autoplayHandler() {\n    if (!isAutoplay) {\n\t\t\tif (gameForAutoplay === autoplayNewGame) {\n\t\t\t\tnewGame();\n\t\t\t}\n\t\t}\n    setisAutoplay(!isAutoplay);\n  }\n\n\tfunction messageOkHandler() {\n\t\tsetmessage('');\n\t\tsetisShowMessage(false);\n\t}\n\n\tfunction goalHandler(newGoal: number) {\n\t\tsetgoal(newGoal);\n\t}\n\n\tfunction togleSavedGamesStatisticsVsibility() {\n\t\tsetisShowStatistics(!isShowStatistics)\n\t}\n\n\tfunction gameForAutoplayHandler(gameType: string) {\n\t\tsetgameForAutoplay(gameType);\n\t}\n\n  return (\n    <div ref={gameWStatAndCanvasWrapper} className='GameField'>\n      {/* <div ref={gameWStatAndCanvasWrapper} className='gameWStatAndCanvasWrapper'> */}\n      <Message\n\t\t\t\tisShowMessage={isShowMessage}\n\t\t\t\tmessage={message}\n\t\t\t\tmessageOkHandler={messageOkHandler}/>\n\t\t\t<SavedGamesStat\n\t\t\t\tgetSavedGames={getSavedGames}\n\t\t\t\tisShowStatistics={isShowStatistics}\n\t\t\t\t/>\n\t\t\t<SettingsPanel\n\t\t\t\tvolume={volume} setVolume={setVolume}\n\t\t\t\tmusicVolume={musicVolume} setmusicVolume={setmusicVolume}\n\t\t\t\tisEffectVolumeMuted={isEffectVolumeMuted} setisEffectVolumeMuted={setisEffectVolumeMuted}\n\t\t\t\tismusicVolumeMuted={ismusicVolumeMuted} setismusicVolumeMuted={setismusicVolumeMuted}\n\t\t\t\tfieldSize={fieldSize} fieldSizeSelecthandler={fieldSizeSelecthandler}\n\t\t\t\tgoal={goal} goalHandler={goalHandler}\n\t\t\t\tgameForAutoplay={gameForAutoplay} gameForAutoplayHandler={gameForAutoplayHandler}/>\n\n      <ControlPanel\n\t\t\t\tnewGameHAndler={newGameHAndler}\n\t\t\t\ttoggleFullScreen={toggleFullScreen}\n\t\t\t\tfullScreenButtonValue={fullScreenButtonValue}\n\t\t\t\tautoplayHandler={autoplayHandler}\n\t\t\t\ttogleSavedGamesStatisticsVsibility={togleSavedGamesStatisticsVsibility}/>\n\t\t\t<CurrentGameStatistics\n\t\t\t\tscore={score}\n\t\t\t\tcellMerges={cellMerges}\n\t\t\t\tmovedCells={movedCells}\n\t\t\t\tgameTime={gameTime}/>\n\t\t\t<GameCanvas\n\t\t\t\tgameCells={gameCells}\n\t\t\t\tisCellAppearance={isCellAppearance}\n\t\t\t\ttransitionDirection={transitionDirection}\n\t\t\t\tcellAnimationEndHandler={cellAnimationEndHandler}\n\t\t\t\tcellTransitionEndHandler={cellTransitionEndHandler}/>\n      {/* </div> */}\n\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","export default __webpack_public_path__ + \"static/media/github.8eebd666.png\";","import React from 'react'\n// import './foter.css'\nimport schoolLogo from './rs_school_js.svg'\nimport githubLogo from './github.png'\n\nexport default function Footer() {\n\treturn(\n\t\t<footer>\n\t\t\t<a href=\"https://rs.school/js/\" target='blank'><div ><img src={schoolLogo} alt=\"schoolLogo\"/>RSS-School</div></a>\n\t\t\t<a href=\"https://github.com/thrvrce/react-game\" target='blank'><div><img src={githubLogo} alt=\"githubLogo\"/>Viktor Avdeev</div></a>\n\t\t\t<div>2021</div>\n\t\t</footer>\n\t)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport GameField from './components/GameField'\nimport Footer from './components/Footer/footer'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n\t\t<div className='mainContent'>\n\t\t\t<GameField/>\n\t\t\t<Footer/>\n\t\t</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}