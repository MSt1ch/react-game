{"version":3,"sources":["components/ControlPanel/ControlPanel.tsx","components/CurrentGameStatistics/Indicator/Indicator.tsx","Const/generalConsts.tsx","components/CurrentGameStatistics/CurrentGameStatistics.tsx","components/GameCanvas/GameCanvas.tsx","components/SettingsPanel/SettingsPanel.tsx","components/Message/Message.tsx","sounds/points.wav","sounds/move.wav","sounds/click.mp3","sounds/noChange.flac","sounds/loose.mp3","sounds/victory.wav","sounds/music.mp3","components/GameField.tsx","components/Footer/rs_school_js.svg","components/Footer/github.png","components/Footer/footer.tsx","index.tsx"],"names":["ControlPanel","newGameHAndler","toggleFullScreen","fullScreenButtonValue","autoplayHandler","className","type","value","onClick","Indicator","props","name","transitionUp","transitionDown","transitionLeft","transitionRight","lengthBetweenCells","saved2048GamesLC","keyboardCeilsControlEvents","insLeadZeroToTimer","timeNumber","toString","CurrentGameStatistics","Math","floor","gameTime","movedCells","cellMerges","score","calcBgColor","result","calcTranslateX","direction","path","calcTranslateY","GameCanvas","gameCells","isCellAppearance","transitionDirection","cellAnimationEndHandler","cellTransitionEndHandler","widthHeight","sqrt","length","gameCanvas","React","useRef","handleAppearAnimation","handleCellTransition","current","ref","onAnimationEnd","innerCellAnimationEndHandler","removeEventListener","onTransitionEnd","innercellTransitionEndHandler","map","index","displayedValue","prevValue","curValue","isCellTransitioned","fontSize","cellStyle","color","background","animation","isUpdatedOrNew","transform","transition","style","width","height","normalizeValue","round","SettingsPanel","setVolume","prev","volume","isEffectVolumeMuted","setisEffectVolumeMuted","ismusicVolumeMuted","setismusicVolumeMuted","fieldSize","onChange","e","fieldSizeSelecthandler","target","goal","goalHandler","Message","isShowMessage","message","messageOkHandler","directions","getRandomNumber","maxValue","random","insertRandom2or4ValueToEmptyField","arr","numOfInserts","newGameCell","arrOfFilledIndexes","push","i","searcValue","indexForInsert","includes","gameCell","forEach","generateNewGame","numOfInsertedValuesOnNewGame","array","Array","fill","calculateNewCellsState","gameCellsToChange","newArr","JSON","parse","stringify","console","log","isArrChanged","points","size","mainAxisStartIndex","mainAxisOffset","crossAxisOffset","mainAxisLastIndex","cell","curColumnIndex","testArr","iteration","srcCellIndexForMove","curCheckRowNumber","processAnalysis","srcCellIndex","srcCell","dstCellIndex","dstCell","undefined","getSavedGames","savedGame","localStorage","getItem","getinitVolumeLevel","arrayOfSavedGames","Date","toISOString","gameCellsHasValue","findIndex","GameField","useState","gameStartTime","setgameStartTime","setscore","setcellMerges","setmovedCells","setgameTime","setfieldSize","setGameCells","setfullScreenButtonValue","setisCellAppearance","settransitionDirection","isAutoplay","setisAutoplay","setisShowMessage","setgoal","setmessage","cancalculateCelsNewState","gameWStatAndCanvasWrapper","efectsVolume","setfectsVolume","musicVolume","setmusicVolume","useSound","pointsSound","move","moveSound","click","clickSound","noChange","noChangeSound","loose","looseSound","victory","victorySound","music","musicSound","isPlaying","useEffect","keyDownHandler","useCallback","cellTransitionDirection","eventName","getCellsTransitionDirection","key","arrForChec","solvability–°heck","newGame","window","addEventListener","timeIncrementInterval","setInterval","curTime","clearInterval","interval","dispatchEvent","KeyboardEvent","newFieldSize","newGoal","document","fullscreenElement","exitFullscreen","requestFullscreen","gameToSave","pop","unshift","setItem","saveGame","Number","Footer","href","src","schoolLogo","alt","githubLogo","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e98af48.chunk.js","sourcesContent":["import React from 'react'\n// import './ControlPanel.css'\n\ninterface ControlPAnel {\n\tnewGameHAndler: Function,\n\ttoggleFullScreen: Function,\n\tfullScreenButtonValue: string,\n\tautoplayHandler: Function\n}\n\nexport default function ControlPanel({newGameHAndler, toggleFullScreen, fullScreenButtonValue, autoplayHandler}: ControlPAnel) {\n\treturn(\n\t\t<div className='ControlPanel'>\n\t\t\t{/* <div>Nickname or login\\authorization</div> */}\n\t\t\t<input type='button' value='New Game' className=' controlButton' onClick={() => newGameHAndler()}></input>\n\t\t\t{/* <input type='button' value='Game Statistics' className=' controlButton'></input> */}\n\t\t\t<input type='button' value={fullScreenButtonValue} className=' controlButton'onClick={() => { toggleFullScreen()}}></input>\n\t\t\t<input type='button' value='Autoplay' className='controlButton'onClick={() => autoplayHandler()}></input>\n\t\t</div>\n\t)\n}","import React from 'react'\n// import './Indicator.css'\n\ninterface Props {\n\tname: string,\n\tvalue: string | number,\n}\nexport default function Indicator(props: Props) {\n\treturn (\n\t\t<div className='Indicator'>\n\t\t\t<div className='Indicator-Name'>{props.name}</div>\n\t\t\t<div className='Indicator-Value'>{props.value}</div>\n\t\t</div>\n\t)\n}","const colorForEmty: string = 'rgba(238, 228, 218, 0.35)';\nconst colorFor2: string = '#eee4da';\nconst colorFor4: string = '#eee1c9';\nconst colorFor8: string = '#f3b27a';\nconst colorFor16: string = '#f69664';\nconst colorFor32: string = '#f77c5f';\nconst colorFor64: string = '#f75f3b';\nconst colorFor128: string = '#edd073';\nconst colorFor256: string = '#edcc62';\nconst colorFor512: string = '#edc850';\nconst colorFor1024: string = '#edc53f';\nconst colorFor2048: string = '#edc22e';\n\n\nconst cellValueColorBelow8: string= '#776e65';\nconst cellValueColorMore8: string= '#f9f6f2';\n\nconst transitionUp: string = 'up';\nconst transitionDown: string = 'daown';\nconst transitionLeft: string = 'left';\nconst transitionRight: string = 'right';\n\nconst lengthBetweenCells: number = 100 / 85 *100; // —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã –∫–ª–∞—Å—Å–∞ GameCanvas-CellBackground –∏ GameCanvas-Cell.\nconst saved2048GamesLC = 'saved2048Games';\nconst keyboardCeilsControlEvents: string[] = ['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'];\n\nfunction insLeadZeroToTimer (timeNumber: number){\n  return  (timeNumber < 10 ? \"0\" : \"\") + timeNumber.toString();\n}\n\nexport {\n\n\n\tcolorForEmty,\n\tcolorFor2,\n\tcolorFor4,\n\tcolorFor8,\n\tcolorFor16,\n\tcolorFor32,\n\tcolorFor64,\n\tcolorFor128,\n\tcolorFor256,\n\tcolorFor512,\n\tcolorFor1024,\n\tcolorFor2048,\n\n\tcellValueColorBelow8,\n\tcellValueColorMore8,\n\n\ttransitionUp,\n\ttransitionDown,\n\ttransitionLeft,\n\ttransitionRight,\n\n\tlengthBetweenCells,\n\tsaved2048GamesLC,\n\tkeyboardCeilsControlEvents,\n\n\tinsLeadZeroToTimer,\n}","import React from \"react\";\n// import './CurrentGameStatistics.css'\nimport Indicator from \"./Indicator/Indicator\";\nimport {insLeadZeroToTimer} from '../../Const/generalConsts'\ntype props ={\n\tscore:number,\n\tcellMerges:number,\n\tmovedCells: number,\n\tgameTime: number,\n}\n// function insLeadZeroToTimer (timeNumber: number){\n//   return  (timeNumber < 10 ? \"0\" : \"\") + timeNumber.toString();\n//  }\n\nexport default function CurrentGameStatistics(props: props) {\n\treturn (\n\t\t<div className='CurrentGameStatistics'>\n\t\t\t\t<Indicator name='Time' value={`${insLeadZeroToTimer(Math.floor(props.gameTime / 60))}:${insLeadZeroToTimer(props.gameTime % 60 || 0 )}`}/>\n\t\t\t\t<Indicator name='Moves' value={props.movedCells}/>\n\t\t\t\t<Indicator name='Merges' value={props.cellMerges}/>\n\t\t\t\t<Indicator name='Score' value={props.score}/>\n\t\t\t</div>\n\t)\n}","import React, { CSSProperties } from \"react\";\n// import './GameCanvas.css'\nimport {gameCell} from '../../Const/generallInterfaces'\nimport { cellValueColorBelow8, cellValueColorMore8, colorForEmty, colorFor2, colorFor4, colorFor8, colorFor16,\tcolorFor32,\tcolorFor64,\tcolorFor128, colorFor256,colorFor512,\n\tcolorFor1024,\n\tcolorFor2048, transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight, lengthBetweenCells} from '../../Const/generalConsts'\n\ninterface props {gameCells: gameCell[], isCellAppearance: boolean, transitionDirection: string, cellAnimationEndHandler: Function, cellTransitionEndHandler: Function};\n\nfunction calcBgColor(value: number | null): string{\n\tlet result: string = '';\n\tswitch(value) {\n\t\tcase 2 : result = colorFor2; break;\n\t\tcase 4 : result = colorFor4; break;\n\t\tcase 8 : result = colorFor8; break;\n\t\tcase 16 : result = colorFor16; break;\n\t\tcase 32 : result = colorFor32; break;\n\t\tcase 64 : result = colorFor64; break;\n\t\tcase 128 : result = colorFor128; break;\n\t\tcase 256 : result = colorFor256; break;\n\t\tcase 512 : result = colorFor512; break;\n\t\tcase 1024 : result = colorFor1024; break;\n\t\tcase 2048 : result = colorFor2048; break;\n\t\tdefault: result = colorForEmty; break;\n\t}\n\treturn result;\n}\n\n\nfunction calcTranslateX(direction: string, path:number){\n\tswitch(direction) {\n\t\tcase transitionRight: return path * lengthBetweenCells;\n\t\tcase transitionLeft: return -path * lengthBetweenCells;\n\t\tdefault: return 0;\n\t}\n}\n\nfunction calcTranslateY(direction: string, path:number){\n\tswitch(direction) {\n\t\tcase transitionDown: return path * lengthBetweenCells;\n\t\tcase transitionUp: return -path * lengthBetweenCells;\n\t\tdefault: return 0;\n\t}\n}\nexport default function GameCanvas({gameCells, isCellAppearance, transitionDirection, cellAnimationEndHandler, cellTransitionEndHandler}:props) {\n\tconst widthHeight = `${100 / Math.sqrt(gameCells.length)}%`;\n\tconst gameCanvas = React.useRef<HTMLDivElement>(null)\n\tconst handleAppearAnimation = React.useRef(false);\n\tconst handleCellTransition = React.useRef(false);\n\n\thandleAppearAnimation.current = isCellAppearance;\n\thandleCellTransition.current = transitionDirection !== '';\n\n\n\tfunction innerCellAnimationEndHandler(){\n\t\tif (handleAppearAnimation.current) {\n\t\t\thandleAppearAnimation.current = false;\n\t\t\tcellAnimationEndHandler();\n\t\t\tif (gameCanvas.current){\n\t\t\t\tgameCanvas.current.removeEventListener('animationend', innerCellAnimationEndHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction innercellTransitionEndHandler() {\n\t\tif (handleCellTransition.current) {\n\t\t\thandleCellTransition.current = false;\n\t\t\tcellTransitionEndHandler();\n\t\t\tif (gameCanvas.current){\n\t\t\t\tgameCanvas.current.removeEventListener('transitionend', innercellTransitionEndHandler);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn(\n\t\t<div ref={gameCanvas} className='GameCanvas' onAnimationEnd={innerCellAnimationEndHandler} onTransitionEnd={innercellTransitionEndHandler}>\n\n\t\t\t{\n\t\t\t\tgameCells.map((value: gameCell, index: number) => {\n\t\t\t\t\tconst displayedValue: number | null = transitionDirection ? value.prevValue : value.curValue;\n\t\t\t\t\tconst isCellTransitioned: boolean = transitionDirection !== '' &&  value.path !== 0;\n\n\t\t\t\t\tlet fontSize: number = 2;\n\t\t\t\t\tif (displayedValue){\n\t\t\t\t\t\tif (displayedValue > 512) {\n\t\t\t\t\t\t\tfontSize = 1.2;\n\t\t\t\t\t\t} else if (displayedValue > 64) {\n\t\t\t\t\t\t\tfontSize = 1.6;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cellStyle: CSSProperties = {\n\t\t\t\t\t\tcolor: displayedValue !== null && displayedValue < 8   ? cellValueColorBelow8 : cellValueColorMore8,\n\t\t\t\t\t\tbackground: calcBgColor(displayedValue),\n\t\t\t\t\t\tanimation: isCellAppearance && value.prevValue !== value.curValue && value.curValue && value.isUpdatedOrNew ? 'insertNewCells .3s linear' : '',\n\t\t\t\t\t\ttransform: isCellTransitioned ? `translate(${calcTranslateX(transitionDirection, value.path)}%, ${calcTranslateY(transitionDirection, value.path)}%)` : '',\n\t\t\t\t\t\ttransition: isCellTransitioned ? 'transform .3s' : '',\n\t\t\t\t\t\tfontSize: `${fontSize}rem`,\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div ref={gameCanvas} key={index.toString()} className='GameCanvas-CellWrapper' style={{ width: widthHeight, height: widthHeight}} >\n\t\t\t\t\t\t\t<div className='GameCanvas-CellBackground'>\n\t\t\t\t\t\t\t\t<div className='GameCanvas-Cell' style={cellStyle}>\n\t\t\t\t\t\t\t\t\t{ displayedValue }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n","import React from 'react'\n// import './SettingsPanel.css'\nimport {insLeadZeroToTimer} from '../../Const/generalConsts'\nfunction normalizeValue(value:number) {\n\treturn Math.round(value * 10) / 10;\n}\n\n\nexport default function SettingsPanel(props:any) {\n\treturn(\n\t\t<div className='SettingsWrapper'>\n\t\t\t<div className='settingsPanelName'>Settings:</div>\n\t\t\t<div className='Parameters'>\n\t\t\t\t<div className='Volume parameter'> Volume level\n\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t<input type='button' value='+' className='controlButton ' onClick={()=> props.setVolume( (prev:number) =>  prev < 1 ? normalizeValue(prev) + 0.1 : 1)}></input>\n\t\t\t\t\t\t{insLeadZeroToTimer(normalizeValue(props.volume)   * 10) }\n\t\t\t\t\t\t<input type='button' value='-' className='controlButton' onClick={()=> props.setVolume( (prev:number) =>  prev > 0 ? normalizeValue(prev) - 0.1 : 0)}></input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input type='button' value={`Sound effects ${props.isEffectVolumeMuted  ?  'OFF' : 'ON'}`} className='controlButton' onClick={ ()=> props.setisEffectVolumeMuted( !props.isEffectVolumeMuted)}></input>\n\t\t\t\t\t<input type='button' value={`Music effects ${props.ismusicVolumeMuted  ?  'OFF' : 'ON'}`} className='controlButton' onClick={()=> props.setismusicVolumeMuted(!props.ismusicVolumeMuted)}></input>\n\t\t\t\t</div>\n\t\t\t\t<div className='fieldSize parameter'> Field size\n\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t<select name=\"fieldSize\" className='controlButton ' value={props.fieldSize} onChange={ (e) =>props.fieldSizeSelecthandler(e.target.value)}>\n\t\t\t\t\t\t\t<option value={3}>3</option>\n\t\t\t\t\t\t\t<option value={4}>4</option>\n\t\t\t\t\t\t\t<option value={5}>5</option>\n\t\t\t\t\t\t\t<option value={6}>6</option>\n\t\t\t\t\t\t\t<option value={7}>7</option>\n\t\t\t\t\t\t\t<option value={8}>8</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='goal parameter'> Current goal\n\t\t\t\t\t<div className='settingControls'>\n\t\t\t\t\t\t<select name=\"goal\" className='controlButton ' value={props.goal} onChange={(e) => props.goalHandler(e.target.value)}>\n\t\t\t\t\t\t\t<option value={16}>16</option>\n\t\t\t\t\t\t\t<option value={32}>32</option>\n\t\t\t\t\t\t\t<option value={64}>64</option>\n\t\t\t\t\t\t\t<option value={128}>128</option>\n\t\t\t\t\t\t\t<option value={256}>256</option>\n\t\t\t\t\t\t\t<option value={512}>512</option>\n\t\t\t\t\t\t\t<option value={1024}>1024</option>\n\t\t\t\t\t\t\t<option value={2048}>2048</option>\n\t\t\t\t\t\t\t<option value={4096}>4096</option>\n\t\t\t\t\t\t\t<option value={8192}>8192</option>\n\t\t\t\t\t\t\t<option value={16384}>16384</option>\n\t\t\t\t\t\t\t<option value={32768}>32768</option>\n\t\t\t\t\t\t\t<option value={65536}>65536</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React from 'react'\n\ntype messageProps = {\n\tisShowMessage: boolean,\n\tmessage: string,\n\tmessageOkHandler: Function,\n\n}\nexport default function Message(props: messageProps) {\n\treturn (\n\t\t<div className='Message' style={{transform: props.isShowMessage ? 'translate(0%, 750%)' : ''}}>\n\t\t\t<div className='MessageTitle'>{props.message}</div>\n\t\t\t<input type=\"button\" className='controlButton' value='OK' onClick={()=>props.messageOkHandler()}/>\n\t\t</div>\n\t)\n}","export default __webpack_public_path__ + \"static/media/points.6a2a0b58.wav\";","export default __webpack_public_path__ + \"static/media/move.f1e4d610.wav\";","export default __webpack_public_path__ + \"static/media/click.49635200.mp3\";","export default __webpack_public_path__ + \"static/media/noChange.df3e968c.flac\";","export default __webpack_public_path__ + \"static/media/loose.410bfa26.mp3\";","export default __webpack_public_path__ + \"static/media/victory.1806f59f.wav\";","export default __webpack_public_path__ + \"static/media/music.7ca942e2.mp3\";","import React from 'react'\n// import \"./GameField.css\";\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\nimport CurrentGameStatistics from \"./CurrentGameStatistics/CurrentGameStatistics\";\nimport GameCanvas from './GameCanvas/GameCanvas'\nimport SettingsPanel from './SettingsPanel/SettingsPanel'\nimport Message from './Message/Message'\nimport useSound from 'use-sound';\n\nimport {gameCell} from '../Const/generallInterfaces'\nimport {transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight, saved2048GamesLC, keyboardCeilsControlEvents} from '../Const/generalConsts'\n\nimport points from '../sounds/points.wav'\nimport move from '../sounds/move.wav'\nimport click from'../sounds/click.mp3'\nimport noChange from '../sounds/noChange.flac'\nimport loose from '../sounds/loose.mp3'\nimport victory from '../sounds/victory.wav'\nimport music from '../sounds/music.mp3'\n\n\nconst directions: string[] = [transitionUp,\ttransitionDown,\ttransitionLeft,\ttransitionRight]\n\nfunction getRandomNumber(maxValue: number): number{\n  return Math.floor(Math.random() * maxValue);\n}\n\nfunction getRandom2Or4Value(): gameCell{\n  const isTwo: boolean = Math.floor(Math.random() * 10) < 9;\n  return isTwo ? {\tcurValue: 2, prevValue: null, isUpdatedOrNew: true, path: 0} : {curValue: 4, prevValue: null, isUpdatedOrNew: true, path: 0};\n}\n\nfunction insertRandom2or4ValueToEmptyField(arr: gameCell[], numOfInserts: number, fieldSize: number):  gameCell[]{\n  const newGameCell: {indexForInsert:number, gameCell: gameCell}[] = [];\n  const arrOfFilledIndexes: number[] = [];\n\n  for (let index = 0; index < arr.length; index++) {\n    if(arr[index].curValue !== null) {\n      arrOfFilledIndexes.push(index);\n    }\n  }\n\tif (arrOfFilledIndexes.length !== arr.length) {\n\t\tfor(let i: number = 1; i <= numOfInserts; i += 1) {\n\t\t\tlet searcValue: boolean = true;\n\n\t\t\twhile(searcValue) {\n\t\t\t\tlet indexForInsert: number = getRandomNumber(fieldSize ** 2);\n\t\t\t\tif(!arrOfFilledIndexes.includes(indexForInsert)) {\n\t\t\t\t\tsearcValue = false;\n\t\t\t\t\tarrOfFilledIndexes.push(indexForInsert)\n\t\t\t\t\tnewGameCell.push({indexForInsert, gameCell: getRandom2Or4Value()});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnewGameCell.forEach( (value) => arr[value.indexForInsert] = value.gameCell)\n\t}\n\n  return arr;\n}\n\nfunction getEmptyGameCell(): gameCell{\n  return {curValue: null, prevValue: null, isUpdatedOrNew: false, path: 0};\n}\n\nfunction generateNewGame(fieldSize : number = 4): gameCell[]{\n  const numOfInsertedValuesOnNewGame = 2;\n\n  let array:gameCell[] = new Array(fieldSize ** 2).fill(getEmptyGameCell());\n\n  for (let index = 0; index < array.length; index++) {\n    array[index] = getEmptyGameCell();\n  }\n\n  array = insertRandom2or4ValueToEmptyField(array, numOfInsertedValuesOnNewGame, fieldSize);\n\n  return array;\n}\n\nfunction calculateNewCellsState(gameCellsToChange:gameCell[], direction: string) :{isArrChanged: boolean, newArr :gameCell[], points: number, cellMerges: number, movedCells: number}{\n  const newArr:gameCell[] = JSON.parse(JSON.stringify(gameCellsToChange));\n\tconsole.log(newArr === gameCellsToChange)\n  let isArrChanged: boolean = false;\n  let points: number = 0;\n  let cellMerges : number = 0;\n  let movedCells: number = 0;\n  const size = Math.sqrt(newArr.length);\n  let mainAxisStartIndex: number = 0;\n  let mainAxisOffset: number = 0;\n  let crossAxisOffset: number = 0;\n  let mainAxisLastIndex: number = 0;\n\n  switch (direction) {\n    case transitionUp: {\n      mainAxisStartIndex = 0;\n      mainAxisLastIndex = size - 1;\n      mainAxisOffset = 1;\n      crossAxisOffset = size;\n      break;\n    }\n\n    case transitionDown: {\n      mainAxisStartIndex = newArr.length - size;\n      mainAxisLastIndex = newArr.length - 1;\n      mainAxisOffset = 1;\n      crossAxisOffset = -size;\n      break;\n    }\n\n    case transitionLeft: {\n      mainAxisStartIndex = 0;\n      mainAxisLastIndex = newArr.length - size;\n      mainAxisOffset = size;\n      crossAxisOffset = 1;\n      break;\n    }\n\n    case transitionRight: {\n      mainAxisStartIndex = size - 1;\n      mainAxisLastIndex = newArr.length - 1;\n      mainAxisOffset = size;\n      crossAxisOffset = -1;\n      break;\n    }\n    default: {}\n  }\n\n  newArr.forEach(cell => cell.prevValue = cell.curValue);\n\n  for (let curColumnIndex = mainAxisStartIndex; curColumnIndex <= mainAxisLastIndex; curColumnIndex += mainAxisOffset) {\n    const testArr = [];\n    for (let iteration = 0; iteration < size; iteration++) {\n      testArr.push(curColumnIndex + crossAxisOffset * iteration)\n    }\n    for (let srcCellIndexForMove = curColumnIndex + crossAxisOffset; testArr.includes(srcCellIndexForMove); srcCellIndexForMove += crossAxisOffset) {\n      let curCheckRowNumber: number = 0;\n      let processAnalysis: boolean = true;\n      while(processAnalysis) {\n        const srcCellIndex: number = srcCellIndexForMove - (curCheckRowNumber * crossAxisOffset);\n        const srcCell: gameCell = newArr[srcCellIndex];\n        const dstCellIndex:number = srcCellIndex - crossAxisOffset;\n        const dstCell:gameCell = newArr[dstCellIndex];\n        if (!srcCell || !dstCell || !testArr.includes(srcCellIndex) || !testArr.includes(dstCellIndex)) {\n          break;\n        }\n        if ( srcCell.curValue ){\n          if (dstCell !== undefined && (dstCell.curValue === null || (dstCell.curValue === srcCell.curValue && dstCell.isUpdatedOrNew === false && srcCell.isUpdatedOrNew === false))){\n            if (dstCell.curValue === null) {\n              dstCell.curValue = \tsrcCell.curValue;\n            } else {\n              dstCell.curValue = dstCell.curValue * 2 ;\n              dstCell.isUpdatedOrNew = true;\n              points = +dstCell.curValue;\n              cellMerges += 1;\n            }\n            srcCell.curValue = null;\n            newArr[srcCellIndexForMove].path += 1;\n            curCheckRowNumber += 1;\n            isArrChanged = true;\n          } else {\n            processAnalysis = false;\n          }\n      } else {\n        curCheckRowNumber += 1;\n      }\n    }\n\n    if (newArr[srcCellIndexForMove].path > 0) {\n      movedCells +=1\n    }\n  }\n  }\n  return { isArrChanged, newArr, points, cellMerges, movedCells};\n}\n\nfunction solvability–°heck (arrForChec: gameCell[]) {\n\tfor (let index = 0; index < directions.length; index++) {\n\t\tconst {isArrChanged} = calculateNewCellsState(arrForChec, directions[index]);\n\t\tif (isArrChanged) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction getCellsTransitionDirection(eventName: string): string {\n\n  switch(eventName){\n    case 'ArrowUp': return transitionUp;\n    case 'ArrowDown': return transitionDown;\n    case 'ArrowRight': return transitionRight;\n    case 'ArrowLeft': return transitionLeft;\n    default: return '';\n  }\n}\n\nfunction getSavedGames() {\n  const savedGame = localStorage.getItem(saved2048GamesLC);\n  return savedGame ? JSON.parse(savedGame) : [];\n}\n\nfunction saveGame (gameCells:gameCell[], score:number, cellMerges: number, movedCells:number, gameTime:number, volume:number, fieldSize: number, gameStartTime: string, goal: number, isEffectVolumeMuted:boolean, ismusicVolumeMuted: boolean, efectsVolume:number, musicVolume:number) {\n  const gameToSave = { gameCells, score, cellMerges, movedCells, gameTime,volume, fieldSize, gameStartTime, goal, isEffectVolumeMuted, ismusicVolumeMuted, efectsVolume, musicVolume};\n  const arrayOfSavedGames = getSavedGames();\n\n  if (arrayOfSavedGames.length > 9) {\n    arrayOfSavedGames.pop();\n  }\n\n  arrayOfSavedGames.unshift(gameToSave);\n  localStorage.setItem(saved2048GamesLC, JSON.stringify(arrayOfSavedGames));\n}\n\n// function getInitialState() {\n//   let gameCells:gameCell[], score:number, cellMerges: number, movedCells:number, gameTime:number, volume:number, fieldSize: number, gameStartTime: string, goal:number, isEffectVolumeMuted: boolean, ismusicVolumeMuted: boolean, efectsVolume:number, musicVolume:number;\n//   const arrayOfSavedGames = getSavedGames();\n\n//   if (arrayOfSavedGames.length === 0) {\n//     gameCells = generateNewGame();\n//     musicVolume = efectsVolume = volume = gameTime = movedCells = cellMerges = score = 0 ;\n//     gameStartTime = new Date().toISOString();\n// \t\tfieldSize = 4;\n// \t\tgoal = 2048;\n// \t\tisEffectVolumeMuted = ismusicVolumeMuted = false;\n//   } else {\n//     gameCells     = arrayOfSavedGames[0].gameCells\n//     score      \t\t= arrayOfSavedGames[0].score\n//     cellMerges    = arrayOfSavedGames[0].cellMerges\n//     movedCells    = arrayOfSavedGames[0].movedCells\n//     gameTime      = arrayOfSavedGames[0].gameTime\n//     volume      \t= arrayOfSavedGames[0].volume\n//     fieldSize     = arrayOfSavedGames[0].fieldSize\n//     gameStartTime = arrayOfSavedGames[0].gameStartTime\n// \t\tgoal\t\t\t\t\t= arrayOfSavedGames[0].goal;\n// \t\tisEffectVolumeMuted = arrayOfSavedGames[0].isEffectVolumeMuted;\n// \t\tismusicVolumeMuted = arrayOfSavedGames[0].ismusicVolumeMuted\n// \t\tefectsVolume = arrayOfSavedGames[0].efectsVolume\n// \t\tmusicVolume = arrayOfSavedGames[0].musicVolume\n//   }\n//   return {gameCells, score, cellMerges, movedCells, gameTime, volume, fieldSize, gameStartTime, goal, isEffectVolumeMuted, ismusicVolumeMuted, efectsVolume, musicVolume}\n// }\nconst getinitVolumeLevel = (type: string)=> {\n\tconst arrayOfSavedGames = getSavedGames();\n\tif (arrayOfSavedGames.length === 0) {\n    switch(type){\n\t\t\tcase 'gameStartTime': return new Date().toISOString();\n\t\t\tcase 'score' :\n\t\t\tcase 'cellMerges' :\n\t\t\tcase 'movedCells':\n\t\t\tcase 'gameTime' : return 0;\n\n\t\t\tcase 'fieldSize': return 4;\n\t\t\tcase 'gameCells': return generateNewGame();\n\t\t\tcase 'goal': return 2048;\n\n\t\t\tcase 'musicVolume' :\n\t\t\tcase 'efectsVolume' :\n\t\t\tcase 'volume' : return 0.5;\n\n\t\t\tcase 'isEffectVolumeMuted':\n\t\t\tcase \t'ismusicVolumeMuted': return false;\n\t\t}\n  } else {\n    return  arrayOfSavedGames[0][type];\n  }\n}\n\nfunction gameCellsHasValue(arr: gameCell[], value: number | null) {\n\treturn arr.findIndex( (cell) => cell.curValue === value ) !== -1;\n}\nexport default function GameField() {\n  const [gameStartTime, setgameStartTime] = React.useState(getinitVolumeLevel('gameStartTime'))\n  const [score\t\t\t\t, setscore] = React.useState(getinitVolumeLevel('score'));\n  const [cellMerges\t\t, setcellMerges] = React.useState(getinitVolumeLevel('cellMerges'));\n  const [movedCells\t\t, setmovedCells] = React.useState(getinitVolumeLevel('movedCells'));\n  const [gameTime\t\t\t, setgameTime] = React.useState(getinitVolumeLevel('gameTime'));\n  const [fieldSize\t\t, setfieldSize] = React.useState(getinitVolumeLevel('fieldSize'))\n  const [gameCells\t\t, setGameCells] = React.useState(getinitVolumeLevel('gameCells'))\n  const [fullScreenButtonValue, setfullScreenButtonValue] = React.useState<string>('Open in fullscreen');\n  let [isCellAppearance, setisCellAppearance] = React.useState(true);\n  let [transitionDirection, settransitionDirection] = React.useState('');\n\tconst [isAutoplay, setisAutoplay] = React.useState(false);\n\tconst [isShowMessage, setisShowMessage] = React.useState(false);\n\tconst [goal, setgoal] = React.useState(getinitVolumeLevel('goal'));\n\tconst [message, setmessage] = React.useState('');\n  let cancalculateCelsNewState = React.useRef(false);\n  let gameWStatAndCanvasWrapper = React.useRef<HTMLDivElement>(null);\n\n\n  const [volume, setVolume] = React.useState(getinitVolumeLevel('volume'))\n\tconst [efectsVolume, setfectsVolume] = React.useState(getinitVolumeLevel('efectsVolume'))\n\tconst [musicVolume, setmusicVolume] = React.useState(getinitVolumeLevel('musicVolume'))\n\tconst [isEffectVolumeMuted, setisEffectVolumeMuted] = React.useState(getinitVolumeLevel('isEffectVolumeMuted'))//todo load\n\tconst [ismusicVolumeMuted, setismusicVolumeMuted] = React.useState(getinitVolumeLevel('ismusicVolumeMuted'))//todo load\n  const [pointsSound] = useSound(points, {volume: efectsVolume});\n  const [moveSound] = useSound(move, {volume: efectsVolume});\n  const [clickSound] = useSound(click, {volume: efectsVolume});\n  const [noChangeSound] = useSound(noChange, {volume: efectsVolume});\n\tconst [looseSound] = useSound(loose, {volume: efectsVolume});\n\tconst [victorySound] = useSound(victory, {volume:efectsVolume});\n\tconst [musicSound, {isPlaying}] = useSound(music, {volume: musicVolume});\n\n\tReact.useEffect( ()=> {\n\t\tif (isEffectVolumeMuted) {\n\t\t\tsetfectsVolume(0);\n\t\t} else {\n\t\t\tsetfectsVolume(volume);\n\t\t}\n\t\tif (ismusicVolumeMuted) {\n\t\t\tsetmusicVolume(0);\n\t\t}\telse {\n\t\t\tsetmusicVolume(volume);\n\t\t}\n\t}, [volume, isEffectVolumeMuted, ismusicVolumeMuted])\n\n  const keyDownHandler = React.useCallback((e: KeyboardEvent)=>{\n    console.log(e);\n    if(cancalculateCelsNewState.current) {\n      // saveGame (gameCells, score, cellMerges, movedCells, gameTime, volume, fieldSize) ;\n      cancalculateCelsNewState.current = false;\n      const cellTransitionDirection: string = getCellsTransitionDirection(e.key);\n      if (directions.includes(cellTransitionDirection)) {\n        const {isArrChanged, newArr, points, cellMerges, movedCells } = calculateNewCellsState(gameCells, cellTransitionDirection);\n        if (isArrChanged) {\n          setGameCells([...newArr])\n          settransitionDirection(cellTransitionDirection);\n          setscore( (curValue:number) => curValue + points);\n          setcellMerges( (curValue:number) => curValue + cellMerges);\n          setmovedCells((curValue:number) => curValue + movedCells);\n          if (points) {\n            pointsSound();\n          } else {\n            moveSound();\n          }\n        } else if (!gameCellsHasValue(gameCells, null)){\n\t\t\t\t\tif (solvability–°heck(gameCells)) {\n\t\t\t\t\t\tnoChangeSound();\n\t\t\t\t\t\tcancalculateCelsNewState.current = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetmessage('You loose (no available moves)');\n\t\t\t\t\t\tsetisShowMessage(true);\n\t\t\t\t\t\tlooseSound();\n\t\t\t\t\t\tcancalculateCelsNewState.current = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n          setGameCells(insertRandom2or4ValueToEmptyField(gameCells, 1, Math.sqrt(gameCells.length)))\n          setisCellAppearance(true);\n          noChangeSound();\n        }\n      }\n    }\n  }, [gameCells, pointsSound, moveSound, noChangeSound, looseSound/*, volume, score, cellMerges, movedCells, gameTime, volume, fieldSize*/])\n\n  const newGame = React.useCallback ( ()=> {\n    clickSound();\n    setisCellAppearance(true)\n    setgameStartTime(new Date().toISOString());\n    setscore(0);\n    setcellMerges(0);\n    setmovedCells(0);\n    setgameTime(0);\n    setGameCells(generateNewGame(fieldSize));\n  }, [fieldSize, clickSound])\n\n  React.useEffect(() => {\n    // const {gameCells, score, cellMerges, movedCells, gameTime, /*volume,*/ fieldSize, gameStartTime, goal, isEffectVolumeMuted, ismusicVolumeMuted} = getInitialState();\n    // setgameStartTime(gameStartTime);\n    // setscore(score)\n    // setcellMerges(cellMerges)\n    // setmovedCells(movedCells)\n    // setgameTime(gameTime)\n    // setfieldSize(fieldSize)\n    // setGameCells(gameCells)\n\t\t// setgoal(goal);\n\t\t// setisEffectVolumeMuted(isEffectVolumeMuted);\n\t\t// setismusicVolumeMuted(ismusicVolumeMuted);\n\t\tcancalculateCelsNewState.current = true;\n    // setVolume( volume) –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–æ —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –≤ useEffect\n  }, [])\n\n\tReact.useEffect( () => {\n\t\tmusicSound();\n\t\t// setInterval(musicSound, duration ? duration : 1000)\n\t\t// musicSound();\n\t}, [musicSound, isPlaying])//isPlaying duration\n\n  React.useEffect(()=>{\n\t\tconsole.log('mouse event effect')\n    window.addEventListener('keydown',keyDownHandler);\n    return () =>  window.removeEventListener('keydown',keyDownHandler);\n  },[keyDownHandler])\n\n  React.useEffect(()=>{\n    const timeIncrementInterval = setInterval(()=> setgameTime((curTime:number)=> Math.floor(curTime + 1)), 1000)\n    return () =>  clearInterval(timeIncrementInterval);\n  },[gameStartTime])\n\n  React.useEffect(() => {\n    let interval: any;\n    if (isAutoplay) {\n      const getRandomKeyDownevent = ()=> {\n        return new KeyboardEvent('keydown', {key: keyboardCeilsControlEvents[getRandomNumber(4)]});\n      }\n      interval = setInterval(() => window.dispatchEvent(getRandomKeyDownevent()) , 1000);\n    }\n    return () =>  clearInterval(interval);\n  }, [isAutoplay])\n\n  function newGameHAndler() {\n    setisAutoplay(false);\n    newGame();\n  }\n\n  function toggleFullScreen() {\n    clickSound();\n    if(document.fullscreenElement){\n      document.exitFullscreen();\n      setfullScreenButtonValue('Open in fullscreen');\n    } else {\n      if (gameWStatAndCanvasWrapper.current !== null) {\n        gameWStatAndCanvasWrapper.current.requestFullscreen();\n        setfullScreenButtonValue('Close fullscreen');\n      }\n    }\n  }\n\n  function cellAnimationEndHandler(){\n    setisCellAppearance(false)\n    setGameCells(gameCells.map( (cell:gameCell) => {\n      cell.prevValue = null;\n      cell.isUpdatedOrNew = false;\n      cell.path = 0;\n      return cell;\n    }));\n    saveGame (gameCells, score, cellMerges, movedCells, gameTime, volume, fieldSize, gameStartTime, goal, isEffectVolumeMuted, ismusicVolumeMuted, efectsVolume, musicVolume) ;\n\t\tif(gameCellsHasValue(gameCells, Number(goal))) {\n\t\t\tvictorySound();\n\t\t\tif (isAutoplay) {\n\t\t\t\tsetisAutoplay(false)\n\t\t\t\tsetmessage(`Wow, autoplay reach ${goal}!`);\n\t\t\t} else {\n\t\t\t\tsetmessage(`Goal ${goal} reached! Try change goal and continue`);\n\t\t\t}\n\t\t\tsetisShowMessage(true);\n\t\t} else {\n\n\t\t}\n\t\tcancalculateCelsNewState.current = true;\n  }\n\n  function cellTransitionEndHandler (){\n    setGameCells(insertRandom2or4ValueToEmptyField(gameCells, 1, Math.sqrt(gameCells.length)));\n    setisCellAppearance(true);\n    settransitionDirection('');\n  }\n\n  function fieldSizeSelecthandler(newFieldSize: number) {\n    setfieldSize(newFieldSize);\n  }\n\n  function autoplayHandler() {\n    if (!isAutoplay) {\n\t\t\tnewGame();\n\t\t}\n    setisAutoplay(!isAutoplay);\n  }\n\n\tfunction messageOkHandler() {\n\t\tsetmessage('');\n\t\tsetisShowMessage(false);\n\t}\n\n\tfunction goalHandler(newGoal: number) {\n\t\tsetgoal(newGoal);\n\t}\n  return (\n    <div ref={gameWStatAndCanvasWrapper} className='GameField'>\n      {/* <div ref={gameWStatAndCanvasWrapper} className='gameWStatAndCanvasWrapper'> */}\n      <Message isShowMessage={isShowMessage} message={message} messageOkHandler={messageOkHandler}/>\n\t\t\t<SettingsPanel\n\t\t\tvolume={volume} setVolume={setVolume}\n\t\t\tmusicVolume={musicVolume} setmusicVolume={setmusicVolume}\n\t\t\tisEffectVolumeMuted={isEffectVolumeMuted} setisEffectVolumeMuted={setisEffectVolumeMuted}\n\t\t\tismusicVolumeMuted={ismusicVolumeMuted} setismusicVolumeMuted={setismusicVolumeMuted}\n\t\t\tfieldSize={fieldSize} fieldSizeSelecthandler={fieldSizeSelecthandler}\n\t\t\tgoal={goal} goalHandler={goalHandler}/>\n      <ControlPanel newGameHAndler={newGameHAndler} toggleFullScreen={toggleFullScreen} fullScreenButtonValue={fullScreenButtonValue} autoplayHandler={autoplayHandler}/>\n        <CurrentGameStatistics\n          score={score}\n          cellMerges={cellMerges}\n          movedCells={movedCells}\n          gameTime={gameTime}\n        />\n        <GameCanvas\n          gameCells={gameCells}\n          isCellAppearance={isCellAppearance}\n          transitionDirection={transitionDirection}\n          cellAnimationEndHandler={cellAnimationEndHandler}\n          cellTransitionEndHandler={cellTransitionEndHandler}\n        />\n      {/* </div> */}\n\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","export default __webpack_public_path__ + \"static/media/github.8eebd666.png\";","import React from 'react'\n// import './foter.css'\nimport schoolLogo from './rs_school_js.svg'\nimport githubLogo from './github.png'\n\nexport default function Footer() {\n\treturn(\n\t\t<footer>\n\t\t\t<a href=\"https://rs.school/js/\" target='blank'><div ><img src={schoolLogo} alt=\"schoolLogo\"/>RSS-School</div></a>\n\t\t\t<a href=\"https://github.com/thrvrce/react-game\" target='blank'><div><img src={githubLogo} alt=\"githubLogo\"/>Viktor Avdeev</div></a>\n\t\t\t<div>2021</div>\n\t\t</footer>\n\t)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport GameField from './components/GameField'\nimport Footer from './components/Footer/footer'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n\t\t<div className='mainContent'>\n\t\t\t<GameField/>\n\t\t\t<Footer/>\n\t\t</div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}